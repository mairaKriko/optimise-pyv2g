#######################################################
# 
# UDPClient.py
# Python implementation of the Class UDPClient
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:23:46
# Original author: Fabian.Stichtenoth
# 
#######################################################
import socket
import struct
import logging

from shared.misc.V2GTPMessage import V2GTPMessage
from shared.misc.TimeRestrictions import TimeRestrictions
from shared.utils.MiscUtils import MiscUtils
from shared.utils.MiscUtils import MiscUtils
from shared.enumerations.GlobalValues import GlobalValues

_unique_udp_client_instance = None


class UDPClient:
    """The UDP client is handling the SECCDiscovery messages only. The standard does
    not foresee any further communication to be done via UDP but TCP. Therefore,
    the size of the UPD packet to be received is restricted to 28 bytes (8 bytes
    header of V2GTP message + 20 byte SECCDiscoveryRes payload).
    """

    def __init__(self):
        self._multicast_socket_port = 0
        self._multicast_address = None
        self._socket_to_udp_server = None
        self._udp_server_response = bytearray(0)
        self._udp_server_packet = None
        self._udp_client_address = None
        self._unique_udp_client_instance = UDPClient()

        self.__set_udp_server_response(bytearray(28))

    @classmethod
    def get_instance(cls):
        """
        Checks for an instance and creates one if there isn't one already. The
        synchronized block is only entered once as long as there is no existing
        instance of the TLSClient (safes valuable resource)
        :return: None
        """
        global _unique_udp_client_instance
        if _unique_udp_client_instance is None:
            # TODO: unklar wie synchronized zu implementieren
            # synchronized (TCPClient.class):
            if _unique_udp_client_instance is None:
                _unique_udp_client_instance = UDPClient()
        return _unique_udp_client_instance

    def get_multicast_address(self):
        """
        Returns the multicast address
        :return _multicast_address:
        """
        return self._multicast_address

    def get_multicast_socket_port(self) -> int:
        """
        Returns the multicast port
        :return _multicast_socket_port: int
        """
        return self._multicast_socket_port

    def get_socket_to_udp_server(self):
        """
        Returns the socket that is connected to the UDP Server
        :return _socket_to_udp_server:
        """
        return self._socket_to_udp_server

    def get_udp_client_address(self):
        """
        Returns the address of the udp client (EVCC)
        :return _udp_client_address:
        """
        return self._udp_client_address

    def get_udp_server_packet(self, packet=None):
        """
        Returns the udp server packet
        :param packet:
        :return _udp_server_packet:
        """
        if packet is None:
            return self._udp_server_packet

        else:
            self._udp_server_packet = packet
            return self._udp_server_packet

    def get_udp_server_response(self) -> bytearray:
        """
        Returns the response of the udp server
        :return _udp_server_response: bytearray
        """
        return self._udp_server_response

    def initialize(self) -> bool:
        """Used to check the correct initialization of a UDP client which is a
        prerequisite for establishing a V2G communication session.
         :return: bool that is True if the initialization of the UDP client was successful, False
        otherwise
        """
        self.__set_socket_to_udp_server(None)

        while self.get_socket_to_udp_server() is None:
            try:
                self.__set_udp_client_address(MiscUtils.get_link_local_address())

                if self.get_udp_client_address() is None:
                    return False

                self.__set_multicast_address(socket.gethostbyname(str(GlobalValues.SDP_MULTICAST_ADDRESS)))
                self.__set_multicast_socket_port(MiscUtils.get_random_port_number())

                multicast_group = self.get_multicast_address()
                client_address = (self.get_udp_client_address(), self.get_multicast_socket_port())
                # TODO: not sure if this works -> testing

                sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

                sock.bind(client_address)

                group = socket.inet_aton(multicast_group)
                mreq = struct.pack('4sL', group, socket.INADDR_ANY)
                sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)

                self.__set_socket_to_udp_server(sock)

                # TODO: not sure what to do with setInterface and joinGroup
                # getSocketToUDPServer().setInterface(getUdpClientAddress())
                # getSocketToUDPServer().joinGroup(getMulticastAddress())

                logging.info(
                    "UDP client initialized at address " + socket.gethostbyname(self.get_udp_client_address()) +
                    " and port " + str(self.get_multicast_socket_port()))
                return True

            except socket.herror as e:
                logging.error("Initialization of UDPClient failed (Unknown host exception)!", e)
                return False

            except IOError as e:
                logging.debug("MulticastSocket creation failed, UDPClient port " + str(self._multicast_socket_port) +
                              " may not be free, trying another port.", e)
                self.__set_socket_to_udp_server(None)
                return False

        return False

    def send(self, v2g_tp_message: V2GTPMessage):
        """
        Gets server address and port and and sends message. Also listens and receives response. Exceptions are caught
        :param v2g_tp_message: V2GTPMessage
        :return:
        """
        # TODO: not sure what to do with the following lines
        # DatagramPacket udpClientPacket = new DatagramPacket(
        #   v2gTPMessage.getMessage(), v2gTPMessage.getMessage().length,
        #   getMulticastAddress(),
        #   GlobalValues.V2G_UDP_SDP_SERVER_PORT.getShortValue())

        # setUdpServerPacket(new DatagramPacket(getUdpServerResponse(), getUdpServerResponse().length))

        try:
            self.get_socket_to_udp_server().settimeout(TimeRestrictions.SDP_RESPONSE_TIMEOUT)
            udp_ser_adr = self.get_multicast_address()
            udp_ser_port = str(GlobalValues.V2G_UDP_SDP_SERVER_PORT)
            self.get_socket_to_udp_server().sendto(bytes(v2g_tp_message.get_message(), "utf-8"),
                                                   (udp_ser_adr, udp_ser_port))
            logging.debug("Message sent")

            self.get_udp_server_packet(self.get_socket_to_udp_server().recv())
            logging.debug("Message received")

            return self.get_udp_server_packet()

        except socket.timeout:
            logging.error("A SocketTimeoutException was thrown while waiting for input stream from UDPServer")

        except socket.herror as e:
            logging.error("UDP request failed (UnknownHostException)!", e)

        except IOError as e:
            logging.error("UDP request failed (IOException)!", e)

        return None

    def __set_multicast_address(self, multicast_address) -> None:
        """
        Sets multicast address
        :param multicast_address:
        :return: None
        """
        self._multicast_address = multicast_address

    def __set_multicast_socket_port(self, multicast_socket_port: int) -> None:
        """
        Sets multicast port
        :param multicast_socket_port: int
        :return: None
        """
        self._multicast_socket_port = multicast_socket_port

    def __set_socket_to_udp_server(self, socket_to_udp_server) -> None:
        """
        Sets socket that is connected to the UDP Server
        :param socket_to_udp_server:
        :return: None
        """
        self._socket_to_udp_server = socket_to_udp_server

    def __set_udp_client_address(self, udp_client_address) -> None:
        """
        Sets the address of the udp client
        :param udp_client_address:
        :return: None
        """
        self._udp_client_address = udp_client_address

    def __set_udp_server_packet(self, udp_server_packet) -> None:
        """
        Sets the udp server packet
        :param udp_server_packet:
        :return: None
        """
        self._udp_server_packet = udp_server_packet

    def __set_udp_server_response(self, udp_server_response: bytearray) -> None:
        """
        Sets the response of the udp server
        :param udp_server_response: bytearray
        :return: None
        """
        self._udp_server_response = udp_server_response

    def stop(self) -> None:
        """
        Stops the socket that is connected to the UDP Server and closes it
        :return: None
        """
        self.get_socket_to_udp_server().shutdown(socket.SHUT_RDWR)
        self.get_socket_to_udp_server().close()
        logging.debug("UDP client stopped")
