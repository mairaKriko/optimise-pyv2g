#######################################################
# 
# WaitForPowerDeliveryRes.py
# Python implementation of the Class WaitForPowerDeliveryRes
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:16:45
# Original author: Fabian.Stichtenoth
# 
#######################################################
from shared.messageHandling.ReactionToIncomingMessage import ReactionToIncomingMessage
from shared.messageHandling.TerminateSession import TerminateSession
from shared.v2gMessages.msgDef.ChargingSessionType import ChargingSessionType
from shared.v2gMessages.msgDef.WeldingDetectionReqType import WeldingDetectionReqType
from shared.v2gMessages.msgDef.DCEVStatusType import DCEVStatusType
from shared.v2gMessages.msgDef.ChargingStatusReqType import ChargingStatusReqType
from shared.v2gMessages.msgDef.PowerDeliveryResType import PowerDeliveryResType
from shared.enumerations.CPStates import CPStates
from shared.enumerations.V2GMessages import V2GMessages
from evcc.session.V2GCommunicationSessionEVCC import V2GCommunicationSessionEVCC
from evcc.states.ClientState import ClientState
from evcc.evController.IDCEVController import IDCEVController


class WaitForPowerDeliveryRes(ClientState):

    def __init__(self, comm_session_context: V2GCommunicationSessionEVCC):
        super().__init__(comm_session_context)

    def __get_send_message(self, charging_session_type: ChargingSessionType,
                           stop_charging_requested: bool) -> ReactionToIncomingMessage:
        """
        Checks if it is AC or DC charging. If DC, checks if signaling CPState C was successful and if so prepares
        WeldingDetectionRes message. If AC, checks if a charging stop was requested and if not, pauses session
        :param charging_session_type: ChargingSessionType
        :param stop_charging_requested: bool
        :return: ReactionToIncomingMessage
        """
        if str(self.get_comm_session_context().get_requested_energy_transfermode()).startswith("DC"):
            if self.get_comm_session_context().get_ev_controller().set_cp_state(CPStates.STATE_C):
                welding_detection_req = WeldingDetectionReqType()
                dc_ev_status: DCEVStatusType = self.get_comm_session_context().get_ev_controller().get_dc_ev_status()
                welding_detection_req.set_dc_ev_status(dc_ev_status)

                return self.get_send_message(welding_detection_req, V2GMessages.WELDING_DETECTION_RES)

            else:
                return TerminateSession("CP state C not ready (current state = " +
                                        self.get_comm_session_context().get_ev_controller().get_cp_state() + ")")

        else:
            if stop_charging_requested:
                self.get_comm_session_context().set_stop_charging_requested(False)

            else:
                self.get_comm_session_context().set_pausing_v2g_comm_session(False)

            return self.get_send_message(self.get_session_stop_req(charging_session_type),
                                         V2GMessages.SESSION_STOP_RES, "(ChargingSession = " +
                                         str(charging_session_type) + ")")

    def processIncomingMessage(self, message) -> ReactionToIncomingMessage:
        """
        Initiates check if message is valid. If so, checks if renegotiation, stop or pause was requested and reacts
        accordingly. If none of these, session continues with next message. If there's an failure, session is terminated
        :param message:
        :return: ReactionToIncomingMessage
        """
        if self.is_incoming_message_valid(message, PowerDeliveryResType.__class__):
            power_delivery_res: PowerDeliveryResType = message.get_body().get_body_element().get_value()

            if self.get_comm_session_context().is_renegotiation_requested():
                self.get_comm_session_context().set_renegotiation_requested(False)
                return self.get_send_message(self.get_charge_parameter_discovery_req(),
                                             V2GMessages.CHARGE_PARAMETER_DISCOVERY_RES)

            elif self.get_comm_session_context().is_stop_charging_requested():
                return self.get_send_message(ChargingSessionType.TERMINATE, True)

            elif self.get_comm_session_context().is_pausing_v2g_comm_session():
                return self.get_send_message(ChargingSessionType.PAUSE, False)

            else:
                if str(self.get_comm_session_context().get_requested_energy_transfermode).startswith("AC"):
                    charging_status_req = ChargingStatusReqType()
                    return self.get_send_message(charging_status_req, V2GMessages.CHARGING_STATUS_RES)

                else:
                    return self.get_send_message(self.get_current_demand_req(), V2GMessages.CURRENT_DEMAND_RES)

        else:
            return TerminateSession("Incoming message raised an error")
