#######################################################
# 
# WaitForPaymentDetailsRes.py
# Python implementation of the Class WaitForPaymentDetailsRes
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:16:11
# Original author: Fabian.Stichtenoth
# 
#######################################################
from shared.messageHandling.ReactionToIncomingMessage import ReactionToIncomingMessage
from shared.messageHandling.TerminateSession import TerminateSession
from shared.v2gMessages.msgDef.PaymentDetailsResType import PaymentDetailsResType
from shared.v2gMessages.msgDef.AuthorizationReqType import AuthorizationReqType
from shared.v2gMessages.msgDef.V2GMessage import V2GMessage
from shared.utils.SecurityUtils import SecurityUtils
from shared.enumerations.GlobalValues import GlobalValues
from shared.enumerations.V2GMessages import V2GMessages
from evcc.session.V2GCommunicationSessionEVCC import V2GCommunicationSessionEVCC
from evcc.states.ClientState import ClientState


class WaitForPaymentDetailsRes(ClientState):

    def __init__(self, comm_session_context: V2GCommunicationSessionEVCC):
        super().__init__(comm_session_context)

    def process_incoming_message(self, message) -> ReactionToIncomingMessage:
        """
        Initiates check if message is valid. If so, checks if GemChallenge was provided and then handles authorization
        and signature. If there's an failure, session is terminated.
        :param message:
        :return: ReactionToIncomingMessage
        """
        if self.is_incoming_message_valid(message, PaymentDetailsResType.__class__):
            v2g_message_res: V2GMessage = message
            payment_details_res: PaymentDetailsResType = v2g_message_res.get_body().get_body_element().get_value()

            if payment_details_res.get_gen_challenge() is None:
                return TerminateSession("GenChallenge not provided in PaymentDetailsRes")

            else:
                self.get_comm_session_context().set_sent_gen_challenge(payment_details_res.get_gen_challenge())
                authorization_req: AuthorizationReqType = self._get_authorization_req(
                    payment_details_res.get_gen_challenge())

                self.get_xml_signature_ref_elements()[authorization_req.get_id()] = SecurityUtils.generate_digest(
                    authorization_req.get_id(), self.get_message_handler().get_jaxb_element(authorization_req))

                self.set_signature_private_key(SecurityUtils.get_private_key(
                    SecurityUtils.get_keystore(
                        str(GlobalValues.EVCC_KEYSTORE_FILEPATH),
                        str(GlobalValues.PASSPHRASE_FOR_CERTIFICATES_AND_KEYS)
                    ), str(GlobalValues.ALIAS_CONTRACT_CERTIFICATE)
                ))

                return self.get_send_message(authorization_req, V2GMessages.AUTHORIZATION_RES)

        else:
            return TerminateSession("Incoming message raised an error")
