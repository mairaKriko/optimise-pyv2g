#######################################################
# 
# WaitForSupportedAppProtocolRes.py
# Python implementation of the Class WaitForSupportedAppProtocolRes
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:21:14
# Original author: Fabian.Stichtenoth
# 
#######################################################
import logging
import time

from shared.messageHandling.ReactionToIncomingMessage import ReactionToIncomingMessage
from shared.messageHandling.TerminateSession import TerminateSession
from shared.v2gMessages.appProtocol.SupportedAppProtocolRes import SupportedAppProtocolRes
from shared.v2gMessages.msgDef.SessionSetupReqType import SessionSetupReqType
from shared.v2gMessages.msgDef.ResponseCodeType import ResponseCodeType
from shared.utils.MiscUtils import MiscUtils
from shared.misc.TimeRestrictions import TimeRestrictions
from shared.enumerations.V2GMessages import V2GMessages
from evcc.session.V2GCommunicationSessionEVCC import V2GCommunicationSessionEVCC
from evcc.states.ClientState import ClientState


class WaitForSupportedAppProtocolRes(ClientState):

    def __init__(self, comm_session_context: V2GCommunicationSessionEVCC):
        super().__init__(comm_session_context)

    def process_incoming_message(self, message) -> ReactionToIncomingMessage:
        """
        Checks if message is instance of SupportedAppProtocolRes. If so, checks response code and sets chosen app
        protocol. Also sets session id and prepares next message. If there's an failure, session is terminated
        :param message:
        :return: ReactionToIncomingMessage
        """
        if isinstance(message, SupportedAppProtocolRes):
            logging.debug("SupportedAppProtocolRes received")
            supported_app_protocol_res: SupportedAppProtocolRes = message
            session_setup_req: SessionSetupReqType = SessionSetupReqType()
            match = False

            if supported_app_protocol_res.get_response_code() == ResponseCodeType.OK_SUCCESSFUL_NEGOTIATION or \
                    supported_app_protocol_res.get_response_code() == ResponseCodeType.\
                    OK_SUCCESSFUL_NEGOTIATION_WITH_MINOR_DEVIATION:
                for evcc_app_protocol in self.get_comm_session_context().get_supported_app_protocols():
                    if evcc_app_protocol.get_schema_id() == supported_app_protocol_res.get_schema_id():
                        self.get_comm_session_context().set_chosen_app_protocol(evcc_app_protocol)
                        match = True
                        break

            else:
                return TerminateSession("No supported appProtocol found (negative response code)")

            if match:
                session_setup_req.set_evcc_id(MiscUtils.get_mac_address())

                session_id = MiscUtils.get_property_value("session.id")
                self.get_comm_session_context().set_session_id(
                    self.get_comm_session_context().generate_session_id_from_value(session_id))

            else:
                return TerminateSession("No supported appProtocol found (positive response code received, " +
                                        "but no valid schemaID. Received schema ID is: " +
                                        supported_app_protocol_res.get_schema_id())

            elapsed_time = time.time_ns() - self.get_comm_session_context().get_v2g_evcc_communication_setup_timer()
            elapsed_time_in_ms = elapsed_time / 1000000

            return self.get_send_message(
                session_setup_req, V2GMessages.SESSION_SETUP_RES,
                min(TimeRestrictions.get_v2g_evcc_msg_timeout(V2GMessages.SESSION_SETUP_RES),
                    TimeRestrictions.V2G_EVCC_COMMUNICATION_SETUP_TIMEOUT - elapsed_time_in_ms))

        else:
            if message is not None:
                class_name = message.__class__.__name__

            else:
                class_name = "<unknown message type>"

            return TerminateSession(
                "Invalid message (" + class_name + ") at this state (" + self.__class__.__name__ + ")")
