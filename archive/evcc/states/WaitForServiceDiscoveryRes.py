#######################################################
# 
# WaitForServiceDiscoveryRes.py
# Python implementation of the Class WaitForServiceDiscoveryRes
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:17:36
# Original author: Fabian.Stichtenoth
# 
#######################################################
import logging

from shared.v2gMessages.msgDef.PaymentOptionListType import PaymentOptionListType
from shared.v2gMessages.msgDef.ServiceListType import ServiceListType
from shared.v2gMessages.msgDef.ServiceCategoryType import ServiceCategoryType
from shared.v2gMessages.msgDef.ServiceDiscoveryResType import ServiceDiscoveryResType
from shared.v2gMessages.msgDef.EnergyTransferModeType import EnergyTransferModeType
from shared.v2gMessages.msgDef.SelectedServiceType import SelectedServiceType
from shared.v2gMessages.msgDef.PaymentOptionType import PaymentOptionType
from shared.messageHandling.ReactionToIncomingMessage import ReactionToIncomingMessage
from shared.messageHandling.TerminateSession import TerminateSession
from shared.enumerations.V2GMessages import V2GMessages
from shared.utils.SecurityUtils import SecurityUtils
from shared.utils.SecurityUtils import ContractCertificateStatus
from evcc.session.V2GCommunicationSessionEVCC import V2GCommunicationSessionEVCC
from evcc.states.ClientState import ClientState
from evcc.transportLayer.TLSClient import TLSClient


class WaitForServiceDiscoveryRes(ClientState):

    def __init__(self, comm_session_context: V2GCommunicationSessionEVCC):
        super().__init__(comm_session_context)

    def __add_selected_service(self, service_id: int, parameter_set_id) -> None:
        """
        Creates instance if SelectedServiceType and adds the selected service
        :param service_id:
        :param parameter_set_id:
        :return:
        """
        selected_service: SelectedServiceType = SelectedServiceType()
        selected_service.set_service_id(service_id)
        selected_service.set_parameter_set_id(parameter_set_id)

        self.get_comm_session_context().get_selected_services().get_selected_service().append(selected_service)

        if service_id is not 1:
            self.get_comm_session_context().get_service_details_to_be_requested().add(service_id)

    @staticmethod
    def __is_certificate_service_offered(offered_service_list: ServiceListType) -> bool:
        """
        Checks if VAS were offered by the EVCC and if so, checks if ServiceCategoryType is correct.
        :param offered_service_list: ServiceListType
        :return: bool that is True if correct service was offered, False otherwise
        """
        if offered_service_list is None:
            logging.debug("No value added services offered by EVCC")
            return False

        for service in offered_service_list.get_service():
            if service.get_service_category() == ServiceCategoryType.CONTRACT_CERTIFICATE:
                return True

        return False

    def process_incoming_message(self, message) -> ReactionToIncomingMessage:
        """
        Initiates check if message is valid. If so, sets offered services, checks charge service and makes sure that the
        EnergyTransferMode is as requested. Sets payment option and checks if VAS should be used or not and prepares
        message accordingly. If there's an failure, session is terminated
        :param message:
        :return: ReactionToIncomingMessage
        """
        if self.is_incoming_message_valid(message, ServiceDiscoveryResType.__class__):
            service_discovery_res: ServiceDiscoveryResType = message.get_body().get_body_element().get_value()

            self.get_comm_session_context().get_selected_services().get_selected_service().clear()
            self.get_comm_session_context().get_service_details_to_be_requested().clear()
            self.get_comm_session_context().set_offered_services(service_discovery_res.get_service_list())

            if service_discovery_res.get_charge_service() is not None:
                requested_energy_transfermode: EnergyTransferModeType = self.get_requested_energy_transfer_mode()

                if service_discovery_res.get_charge_service().get_supported_energy_transfermode().\
                        get_energy_transfermode() in requested_energy_transfermode:
                    self.get_comm_session_context().set_requested_energy_transfermode(requested_energy_transfermode)
                    self.get_comm_session_context().get_offered_services().get_service().add(
                        service_discovery_res.get_charge_service())
                    self.__add_selected_service(1, None)

                else:
                    return TerminateSession("Offered EnergyTransferModes not compatible with the requested one")

            else:
                return TerminateSession("No charge service available")

            user_payment_option: PaymentOptionType = self.get_comm_session_context().get_ev_controller().\
                get_payment_option(service_discovery_res.get_payment_option_list())
            self.get_comm_session_context().set_selected_payment_option(user_payment_option)

            if self.__use_vas(service_discovery_res):
                return self.get_send_message(self.get_service_detail_req(), V2GMessages.SERVICE_DETAIL_RES)

            else:
                return self.get_send_message(self.get_payment_service_selection_req(),
                                             V2GMessages.PAYMENT_SERVICE_SELECTION_RES)

        else:
            return TerminateSession("Incoming message raised an error")

    def __use_vas(self, service_discovery_res: ServiceDiscoveryResType) -> bool:
        """According to [V2G2-422] a ServiceDetailsReq is needed in case VAS (value added
        services) such as certificate installation/update are to be used and offered by
        the SECC. Furthermore, it must be checked if VAS are allowed (-> only if TLS
        connection is used)
        :param service_discovery_res: ServiceDiscoveryResType
        :return: bool that is True if everything worked, False otherwise
        """
        if service_discovery_res.get_service_list() is not None and isinstance(
                self.get_comm_session_context().get_transport_layer_client(), TLSClient):
            logging.debug("List of offered value added services: ")
            for service in service_discovery_res.get_service_list().get_service():
                logging.debug("ID = " + service.get_service_id() + ", name = " + service.get_service_name())

            if self.__is_certificate_service_offered(service_discovery_res.get_service_list()):
                self.get_comm_session_context().set_contract_cert_status(
                    SecurityUtils.get_contract_certificate_status())

                if self.get_comm_session_context().get_contract_cert_status() == ContractCertificateStatus.\
                        INSTALLATION_NEEDED:
                    self.__add_selected_service(2, 1)

                elif self.get_comm_session_context().get_contract_cert_status() == ContractCertificateStatus.\
                        UPDATE_NEEDED:
                    self.__add_selected_service(2, 2)

        else:
            return False

        if len(self.get_comm_session_context().get_service_details_to_be_requested()) > 0:
            return True

        else:
            return False
