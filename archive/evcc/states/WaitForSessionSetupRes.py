#######################################################
# 
# WaitForSessionSetupRes.py
# Python implementation of the Class WaitForSessionSetupRes
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:17:58
# Original author: Fabian.Stichtenoth
# 
#######################################################
import logging

from shared.messageHandling.ReactionToIncomingMessage import ReactionToIncomingMessage
from shared.messageHandling.TerminateSession import TerminateSession
from shared.v2gMessages.msgDef.SessionSetupResType import SessionSetupResType
from shared.v2gMessages.msgDef.ResponseCodeType import ResponseCodeType
from shared.v2gMessages.msgDef.ServiceDiscoveryReqType import ServiceDiscoveryReqType
from shared.enumerations.V2GMessages import V2GMessages
from evcc.session.V2GCommunicationSessionEVCC import V2GCommunicationSessionEVCC
from evcc.states.ClientState import ClientState


class WaitForSessionSetupRes(ClientState):

    def __init__(self, comm_session_context: V2GCommunicationSessionEVCC):
        super().__init__(comm_session_context)

    def process_incoming_message(self, message) -> ReactionToIncomingMessage:
        """
        Initiates check if message is valid. If so, checks if a new session was started or an old one was joined. Then
        acts accordingly. If there's an failure, session is terminated
        :param message:
        :return: ReactionToIncomingMessage
        """
        if self.is_incoming_message_valid(message, SessionSetupResType.__class__):
            received_session_id = message.get_header().get_session_id()
            session_setup_res: SessionSetupResType = message.get_body().get_body_element().get_value()

            if session_setup_res.get_response_code() == ResponseCodeType.OK_NEW_SESSION_ESTABLISHED:
                self.get_comm_session_context().set_session_id(received_session_id)
                logging.debug("Negotiated session ID is " + str(int.from_bytes(received_session_id, byteorder='big')))
                self.get_comm_session_context().set_old_session_joined(False)
                self.get_comm_session_context().set_evse_id(session_setup_res.get_evse_id())

                if session_setup_res.get_evse_timestamp() is not None:
                    self.get_comm_session_context().set_evse_timestamp(session_setup_res.get_evse_timestamp())

                elif session_setup_res.get_response_code() == ResponseCodeType.OK_OLD_SESSION_JOINED:
                    logging.debug("Previous charging session joined (session ID = " + str(int.from_bytes(
                        received_session_id, byteorder='big')) + ")")
                    self.get_comm_session_context().set_old_session_joined(True)
                    self.get_comm_session_context().set_evse_id(session_setup_res.get_evse_id())
                    self.get_comm_session_context().set_evse_timestamp(session_setup_res.get_evse_timestamp())

                else:
                    self.get_comm_session_context().set_old_session_joined(False)
                    logging.error("No negative response code received, but positive response code '" +
                                  str(session_setup_res.get_response_code()) + "' is " +
                                  "neither OK_NEW_SESSION_ESTABLISHED nor OK_OLD_SESSION_JOINED")
                    return TerminateSession("Positive response code invalid in state WaitForSessionSetupRes")

                service_discovery_req = ServiceDiscoveryReqType()

                return self.get_send_message(service_discovery_req, V2GMessages.SERVICE_DISCOVERY_RES)

            else:
                self.get_comm_session_context().set_old_session_joined(False)
                return TerminateSession("Incoming message raised an error")
