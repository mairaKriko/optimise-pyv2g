#######################################################
# 
# WaitForMeteringReceiptRes.py
# Python implementation of the Class WaitForMeteringReceiptRes
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:15:55
# Original author: Fabian.Stichtenoth
# 
#######################################################
from shared.messageHandling.ReactionToIncomingMessage import ReactionToIncomingMessage
from shared.messageHandling.TerminateSession import TerminateSession
from shared.v2gMessages.msgDef.MeteringReceiptResType import MeteringReceiptResType
from shared.v2gMessages.msgDef.ChargingStatusReqType import ChargingStatusReqType
from shared.v2gMessages.msgDef.ChargeProgressType import ChargeProgressType
from shared.v2gMessages.msgDef.V2GMessage import V2GMessage
from shared.enumerations.V2GMessages import V2GMessages
from evcc.session.V2GCommunicationSessionEVCC import V2GCommunicationSessionEVCC
from evcc.states.ClientState import ClientState


class WaitForMeteringReceiptRes(ClientState):

    def __init__(self, comm_session_context: V2GCommunicationSessionEVCC):
        self._ac_charging: bool = False
        super().__init__(comm_session_context)

    def __is_ac_charging(self) -> bool:
        """
        Returns a parameter that indicates if the charging method is AC
        :return _ac_charging: bool that is True if AC charging, False otherwise
        """
        return self._ac_charging

    def default(self):
        """
        Default method of Switcher
        :return: method call get_send_message
        """
        if self.__is_ac_charging():
            charging_status_req = ChargingStatusReqType()
            return self.get_send_message(charging_status_req, V2GMessages.CHARGING_STATUS_RES)

        else:
            return self.get_send_message(self.get_current_demand_req(), V2GMessages.CURRENT_DEMAND_RES)

    def stop(self):
        """
        Stop charging method of Switcher
        :return: method call get_send_message
        """
        self.get_comm_session_context().set_stop_charging_requested(True)
        return self.get_send_message(self.get_power_delivery_req(ChargeProgressType.STOP),
                                     V2GMessages.POWER_DELIVERY_RES, " (ChargeProgress = STOP_CHARGING)"
                                     )

    def re(self):
        """
        Renegotiation method of Switcher
        :return: method call get_send_message
        """
        return self.get_send_message(self.get_power_delivery_req(ChargeProgressType.RENEGOTIATE),
                                     V2GMessages.POWER_DELIVERY_RES, " (ChargeProgress = RE_NEGOTIATION)"
                                     )

    def process_incoming_message(self, message) -> ReactionToIncomingMessage:
        """
        Initiates check if message is valid. If so, checks if receipt is required. If so, checks if AC or DC charging
        and adjusts _ac_charging parameter. Then calls switcher dependent on charge progress. If there's an failure,
        session is terminated.
        :param message:
        :return: ReactionToIncomingMessage
        """
        if self.is_incoming_message_valid(message, MeteringReceiptResType.__class__):
            v2g_message_res: V2GMessage = message
            metering_receipt_res: MeteringReceiptResType = v2g_message_res.get_body().get_body_element().get_value()

            if str(self.get_comm_session_context().get_requested_energy_transfermode()).startswith("AC"):
                self.__set_ac_charging(True)
                evse_notification = metering_receipt_res.get_evse_status().get_value().get_evse_notification()

            elif str(self.get_comm_session_context().get_requested_energy_transfermode()).startswith("DC"):
                self.__set_ac_charging(False)
                evse_notification = metering_receipt_res.get_evse_status().get_value().get_evse_notification()

            else:
                return TerminateSession("RequestedEnergyTransferMode '" +
                                        str(self.get_comm_session_context().get_requested_energy_transfermode()) +
                                        "is neither of type AC nor DC")

            switcher = {
                "STOP_CHARGING": "stop",
                "RE_NEGOTIATION": "re",
            }

            func = switcher.get(evse_notification, lambda: self.default())
            return func()

        else:
            return TerminateSession("Incoming message raised an error")
        pass

    def __set_ac_charging(self, ac_charging: bool) -> None:
        """
        Sets a parameter that indicates if the charging method is AC
        :param ac_charging: bool
        :return: None
        """
        self._ac_charging = ac_charging
