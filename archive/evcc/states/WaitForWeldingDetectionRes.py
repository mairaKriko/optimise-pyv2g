#######################################################
# 
# WaitForWeldingDetectionRes.py
# Python implementation of the Class WaitForWeldingDetectionRes
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:21:48
# Original author: Fabian.Stichtenoth
# 
#######################################################
from shared.messageHandling.ReactionToIncomingMessage import ReactionToIncomingMessage
from shared.messageHandling.TerminateSession import TerminateSession
from shared.v2gMessages.msgDef.WeldingDetectionResType import WeldingDetectionResType
from shared.v2gMessages.msgDef.ChargingSessionType import ChargingSessionType
from shared.enumerations.V2GMessages import V2GMessages
from evcc.session.V2GCommunicationSessionEVCC import V2GCommunicationSessionEVCC
from evcc.states.ClientState import ClientState


class WaitForWeldingDetectionRes(ClientState):

    def __init__(self, comm_session_context: V2GCommunicationSessionEVCC):
        super().__init__(comm_session_context)

    def process_incoming_message(self, message) -> ReactionToIncomingMessage:
        """
        Initiates check if message is valid. If so, checks if session was paused or stopped and continues it if needed.
        Prepares next message. If there's an failure, session is terminated
        :param message:
        :return: ReactionToIncomingMessage
        """
        if self.is_incoming_message_valid(message, WeldingDetectionResType.__class__):
            # welding_detection_res: WeldingDetectionResType = message.get_body().get_body_element().get_value()

            if self.get_comm_session_context().is_pausing_v2g_comm_session():
                self.get_comm_session_context().set_pausing_v2g_comm_session(False)

                return self.get_send_message(self.get_session_stop_req(ChargingSessionType.PAUSE),
                                             V2GMessages.SESSION_STOP_RES, "(ChargingSession = " +
                                             str(ChargingSessionType.PAUSE) + ")")

            else:
                self.get_comm_session_context().set_stop_charging_requested(False)

                return self.get_send_message(self.get_session_stop_req(ChargingSessionType.TERMINATE),
                                             V2GMessages.SESSION_STOP_RES, "(ChargingSession = " +
                                             str(ChargingSessionType.TERMINATE) + ")")

        else:
            return TerminateSession("Incoming message raised an error")
