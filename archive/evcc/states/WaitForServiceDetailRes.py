#######################################################
# 
# WaitForServiceDetailRes.py
# Python implementation of the Class WaitForServiceDetailRes
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:17:23
# Original author: Fabian.Stichtenoth
# 
#######################################################
from shared.messageHandling.ReactionToIncomingMessage import ReactionToIncomingMessage
from shared.messageHandling.TerminateSession import TerminateSession
from shared.v2gMessages.msgDef.ServiceDetailResType import ServiceDetailResType
from shared.enumerations.V2GMessages import V2GMessages
from evcc.session.V2GCommunicationSessionEVCC import V2GCommunicationSessionEVCC
from evcc.states.ClientState import ClientState


class WaitForServiceDetailRes(ClientState):

    def __init__(self, comm_session_context: V2GCommunicationSessionEVCC):
        super().__init__(comm_session_context)

    def process_incoming_message(self, message) -> ReactionToIncomingMessage:
        """
        Initiates check if message is valid. If so, checks for ServiceDetailReq and accordingly prepares next message.
        If there's an failure, session is terminated
        :param message:
        :return: ReactionToIncomingMessage
        """
        if self.is_incoming_message_valid(message, ServiceDetailResType.__class__):
            # service_detail_res: ServiceDetailResType = message.get_body().get_body_element().get_value()
            service_detail_req = self.get_service_detail_req()

            if service_detail_req is not None:
                return self.get_send_message(service_detail_req, V2GMessages.SERVICE_DETAIL_RES)

            else:
                return self.get_send_message(self.get_payment_service_selection_req(),
                                             V2GMessages.PAYMENT_SERVICE_SELECTION_RES)

        else:
            return TerminateSession("Incoming message raised an error")
