#######################################################
# 
# DummyEVController.py
# Python implementation of the Class DummyEVController
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 10:57:57
# Original author: Fabian.Stichtenoth
# 
#######################################################
import logging
from lxml import etree

from evcc.session.V2GCommunicationSessionEVCC import V2GCommunicationSessionEVCC
from shared.enumerations.CPStates import CPStates
from shared.v2gMessages.msgDef.PhysicalValueType import PhysicalValueType
from shared.v2gMessages.msgDef.ChargingProfileType import ChargingProfileType
from shared.v2gMessages.msgDef.DCEVStatusType import DCEVStatusType
from shared.v2gMessages.msgDef.DCEVPowerDeliveryParameterType import DCEVPowerDeliveryParameterType
from shared.v2gMessages.msgDef.ACEVChargeParameterType import ACEVChargeParameterType
from shared.v2gMessages.msgDef.DCEVChargeParameterType import DCEVChargeParameterType
from shared.v2gMessages.msgDef.UnitSymbolType import UnitSymbolType
from shared.v2gMessages.msgDef.SAScheduleListType import SAScheduleListType
from shared.v2gMessages.msgDef.SAScheduleTupleType import SAScheduleTupleType
from shared.v2gMessages.msgDef.PMaxScheduleType import PMaxScheduleType
from shared.v2gMessages.msgDef.ProfileEntryType import ProfileEntryType
from shared.v2gMessages.msgDef.DCEVErrorCodeType import DCEVErrorCodeType
from shared.v2gMessages.msgDef.PaymentOptionListType import PaymentOptionListType
from shared.v2gMessages.msgDef.PaymentOptionType import PaymentOptionType
from shared.v2gMessages.msgDef.EnergyTransferModeType import EnergyTransferModeType
from evcc.evController.IACEVController import IACEVController
from evcc.evController.IDCEVController import IDCEVController


class DummyEVController(IACEVController, IDCEVController):

    def __init__(self, comm_session_context):
        self._comm_session_context = None
        self._cp_state = None
        self._charging_loop_counter: int = 0

        self.set_comm_session_context(comm_session_context)
        self.set_cp_state(CPStates.STATE_B)
        self.set_charging_loop_counter(0)

    def adjust_max_current(self, evse_max_current: PhysicalValueType) -> None:
        """Indicates the maximum line current per phase the EV can draw (as allowed by the
        SECC)
        :param evse_max_current:
        :return: None
        """
        multiplier = evse_max_current.get_multiplier() & 0xFF
        logging.info("Adjusting max current to " + evse_max_current.get_value() * pow(10, multiplier) + " A")
        pass

    def get_ac_ev_charge_parameter(self):
        """Returns the charge parameter for AC charging
        :return JAXBElement<ACEVChargeParameterType>: The battery specific charge parameter for the current charging
        session
        """
        ac_ev_charge_parameter = ACEVChargeParameterType()
        ac_ev_charge_parameter.set_departure_time(7200)

        e_amount = PhysicalValueType()
        e_amount.set_multiplier(b'0')
        e_amount.set_unit(UnitSymbolType.WH)
        e_amount.set_value(5000)
        ac_ev_charge_parameter.set_e_amount(e_amount)

        ev_max_voltage = PhysicalValueType()
        ev_max_voltage.set_multiplier(b'0')
        ev_max_voltage.set_unit(UnitSymbolType.V)
        ev_max_voltage.set_value(400)
        ac_ev_charge_parameter.set_ev_max_voltage(ev_max_voltage)

        ev_max_current = PhysicalValueType()
        ev_max_current.set_multiplier(b'0')
        ev_max_current.set_unit(UnitSymbolType.A)
        ev_max_current.set_value(32)
        ac_ev_charge_parameter.set_ev_max_current(ev_max_current)

        ev_min_current = PhysicalValueType()
        ev_min_current.set_multiplier(b'0')
        ev_min_current.set_unit(UnitSymbolType.A)
        ev_min_current.set_value(5)
        ac_ev_charge_parameter.set_ev_min_current(ev_min_current)

        # TODO: JAXBElement needs to be changed

        xml_cont: dict = vars(ac_ev_charge_parameter)

        library = etree.Element(str("urn_iso_15118_2_2013_MsgDataTypes"))

        for k, v in xml_cont.items():
            element = etree.SubElement(library, 'AC_EVChargeParameter')
            element.set(str(k), v)

        return library

    def get_charging_loop_counter(self) -> int:
        """Returns the charging loop counter
        :return int: charging loop counter
        """
        return self._charging_loop_counter

    def get_charging_profile(self) -> ChargingProfileType:
        """Returns the specific charging profile for the current charging session (i.e.
        maximum amount of power drawn over time)
        :return ChargingProfileType: The charging profile with a list of profile entries
        """
        charging_profile = ChargingProfileType()

        sa_schedule_list: SAScheduleListType = self.get_comm_session_context().get_sa_schedules()

        sa_schedule_tuple: SAScheduleTupleType = sa_schedule_list.get_sa_schedule_tuple().get(0)

        p_max_schedule: PMaxScheduleType = sa_schedule_tuple.get_p_max_schedule()

        p_max_schedule_entries = p_max_schedule.get_p_max_schedule_entry()

        for p_max_schedule_entry in p_max_schedule_entries:
            charging_profile_entry = ProfileEntryType()

            max_power = PhysicalValueType()
            max_power.set_multiplier(p_max_schedule_entry.get_p_max().get_multiplier())
            max_power.set_unit(UnitSymbolType.W)
            max_power.set_value(p_max_schedule_entry.get_p_max().get_value())

            charging_profile_entry.set_charging_profile_entry_max_power(max_power)
            charging_profile_entry.set_charging_profile_entry_max_number_of_phases_in_use(b'3')
            charging_profile_entry.set_charging_profile_entry_start(
                p_max_schedule_entry.get_time_interval().get_value().get_start())

            charging_profile.get_profile_entry().append(charging_profile_entry)

        return charging_profile

    def get_chosen_sa_schedule_tuple_id(self):
        """Returns the unique identifier within a charging session for a SAScheduleTuple
        element contained in the list of SASchedules delivered by the EVSE. An
        SAScheduleTupleID remains a unique identifier for one schedule throughout a
        charging session.
        :return int: The unique ID given as a int value
        """
        return self.get_comm_session_context().get_sa_schedules().get_sa_schedule_tuple()[0].get_sa_schedule_tuple_id()

    def get_comm_session_context(self) -> V2GCommunicationSessionEVCC:
        """Returns the current V2GCommunicationSession of the evcc.
        :return V2GCommunicationSessionEVCC:
        """
        return self._comm_session_context

    def get_cp_state(self) -> CPStates:
        """Returns the current CP state according IEC 61851-1 (State A, B, C or D)
        :return CPStates: The respective CP state
        """
        return self._cp_state

    def get_dc_ev_charge_parameter(self):
        """Returns the charge parameter for DC charging
        :return JAXBElement<DCEVChargeParameterType>: The battery specific charge parameter for the current charging
        session
        """
        ev_max_current = PhysicalValueType()
        ev_max_current.set_multiplier(b'0')
        ev_max_current.set_unit(UnitSymbolType.V)
        ev_max_current.set_value(200)

        ev_max_voltage = PhysicalValueType()
        ev_max_voltage.set_multiplier(b'0')
        ev_max_voltage.set_unit(UnitSymbolType.V)
        ev_max_voltage.set_value(400)

        e_amount = PhysicalValueType()
        e_amount.set_multiplier(b'0')
        e_amount.set_unit(UnitSymbolType.WH)
        e_amount.set_value(5000)

        dc_ev_charge_parameter = DCEVChargeParameterType()
        dc_ev_charge_parameter.set_dc_ev_status(self.get_dc_ev_status())
        dc_ev_charge_parameter.set_ev_maximum_current_limit(ev_max_current)
        dc_ev_charge_parameter.set_ev_maximum_voltage_limit(ev_max_voltage)
        dc_ev_charge_parameter.set_ev_energy_request(e_amount)

        # TODO: JAXBElement needs to be changed

        xml_cont: dict = vars(dc_ev_charge_parameter)

        library = etree.Element(str("urn_iso_15118_2_2013_MsgDataTypes"))

        for k, v in xml_cont.items():
            element = etree.SubElement(library, 'DC_EVChargeParameter')
            element.set(str(k), v)

        return library

    def get_dc_ev_status(self) -> DCEVStatusType:
        """Returns the EV status parameter for DC charging
        :return DCEVStatusType: The EV status for DC charging for the current charging session
        """
        dc_ev_status = DCEVStatusType()
        dc_ev_status.set_ev_error_code(DCEVErrorCodeType.NO_ERROR)
        dc_ev_status.set_ev_ready(True)
        dc_ev_status.set_ev_res_soc(b'50')

        return dc_ev_status

    def get_ev_power_delivery_parameter(self) -> DCEVPowerDeliveryParameterType:
        """Returns the DC_EVPowerDeliverParameter
        :return DCEVPowerDeliveryParameterType: The DC_EVPowerDeliverParameter
        """
        dc_ev_power_delivery_parameter = DCEVPowerDeliveryParameterType()
        dc_ev_power_delivery_parameter.set_bulk_charging_complete(False)
        dc_ev_power_delivery_parameter.set_charging_complete(False)
        dc_ev_power_delivery_parameter.set_dc_ev_status(self.get_dc_ev_status())

        return dc_ev_power_delivery_parameter

    def get_maximum_current_limit(self) -> PhysicalValueType:
        """Returns the maximum current limit for DC charging
        :return PhysicalValueType: The maximum current given as a PhysicalValueType
        """
        max_current_limit = PhysicalValueType()
        max_current_limit.set_multiplier(b'0')
        max_current_limit.set_unit(UnitSymbolType.A)
        max_current_limit.set_value(32)

        return max_current_limit

    def get_maximum_power_limit(self) -> PhysicalValueType:
        """Returns the maximum power limit for DC charging
        :return PhysicalValueType: The maximum power given as a PhysicalValueType
        """
        max_power_limit = PhysicalValueType()
        max_power_limit.set_multiplier(b'3')
        max_power_limit.set_unit(UnitSymbolType.W)
        max_power_limit.set_value(63)

        return max_power_limit

    def get_maximum_voltage_limit(self) -> PhysicalValueType:
        """Returns the maximum voltage limit for DC charging
        :return PhysicalValueType: The maximum voltage given as a PhysicalValueType
        """
        max_voltage_limit = PhysicalValueType()
        max_voltage_limit.set_multiplier(b'0')
        max_voltage_limit.set_unit(UnitSymbolType.V)
        max_voltage_limit.set_value(400)

        return max_voltage_limit

    def get_payment_option(self, payment_options_offered: PaymentOptionListType) -> PaymentOptionType:
        """Returns the user-chosen payment method, either external identification means
        (EIM) such as an RFID card or via Plug-and-Charge (PnC)
        :return PaymentOptionType: The payment option Contract or ExternalPayment
        """
        if PaymentOptionType.CONTRACT in payment_options_offered.get_payment_option():
            if not self.get_comm_session_context().is_tls_connection():
                logging.warning(
                    "SECC offered CONTRACT based payment although no TLS connectionis used. Choosing EIM instead")
                return PaymentOptionType.EXTERNAL_PAYMENT

            else:
                return PaymentOptionType.CONTRACT

        else:
            return PaymentOptionType.EXTERNAL_PAYMENT

    def get_remaining_time_to_bulk_soc(self) -> PhysicalValueType:
        """Returns the estimated or calculated time until bulk charge (approx. 80% SOC) is
        complete
        :return PhysicalValueType: The estimated time given as a PhysicalValueType
        """
        remaining_time_to_bulk_soc = PhysicalValueType()
        remaining_time_to_bulk_soc.set_multiplier(b'0')
        remaining_time_to_bulk_soc.set_unit(UnitSymbolType.S)
        remaining_time_to_bulk_soc.set_value(900)

        return remaining_time_to_bulk_soc

    def get_remaining_time_to_full_soc(self) -> PhysicalValueType:
        """Returns the estimated or calculated time until full charge (100% SOC) is
        complete
        :return PhysicalValueType: The estimated time given as a PhysicalValueType
        """
        remaining_time_to_full_soc = PhysicalValueType()
        remaining_time_to_full_soc.set_multiplier(b'0')
        remaining_time_to_full_soc.set_unit(UnitSymbolType.S)
        remaining_time_to_full_soc.set_value(1800)

        return remaining_time_to_full_soc

    def get_requested_energy_transfer_mode(self):
        """Returns the EnergyTransferMode chosen by the driver
        :return EnergyTransferModeType: The chosen EnergyTransferMode
        """
        return EnergyTransferModeType.AC_SINGLE_PHASE_CORE

    def get_target_current(self) -> PhysicalValueType:
        """Returns the target current for DC charging
        :return PhysicalValueType: Target current given as a PhysicalValueType
        """
        target_current = PhysicalValueType()
        target_current.set_multiplier(b'0')
        target_current.set_unit(UnitSymbolType.A)
        target_current.set_value(32)

        return target_current

    def get_target_voltage(self) -> PhysicalValueType:
        """Returns the target voltage for DC charging
        :return PhysicalValueType: Target voltage given as a PhysicalValueType
        """
        target_voltage = PhysicalValueType()
        target_voltage.set_multiplier(b'0')
        target_voltage.set_unit(UnitSymbolType.V)
        target_voltage.set_value(400)

        return target_voltage

    def is_bulk_charging_complete(self) -> bool:
        """If set to TRUE, the EV indicates that bulk charging (approx. 80% SOC) is
        complete.
        :return bool: True, if bulk charge is complete, false otherwise
        """
        return False

    def is_charging_complete(self) -> bool:
        """If set to TRUE, the EV indicates that charging process is complete.
        :return bool: True, if charging process is complete, false otherwise
        """
        return False

    def is_charging_loop_active(self) -> bool:
        """Provides information on whether the charging loop should be active to charge
        the EV's battery, or not
        :return bool: True, if charging process should be continued, false otherwise
        """
        if self.get_charging_loop_counter() < 10:
            self.set_charging_loop_counter(self.get_charging_loop_counter() + 1)
            return True

        else:
            return False

    def set_charging_loop_counter(self, charging_loop_counter: int) -> None:
        """Sets the charging loop counter
        :param charging_loop_counter:
        :return None:
        """
        self._charging_loop_counter = charging_loop_counter

    def set_comm_session_context(self, comm_session_context: V2GCommunicationSessionEVCC) -> None:
        """Provides a reference to the current communication session for this controller
        instance.
        :param comm_session_context:
        :return None:
        """
        self._comm_session_context = comm_session_context

    def set_cp_state(self, state: CPStates) -> bool:
        """Signals a CP state according to IEC 61851-1 (State A, B, C or D)
        :return bool: True, if the state signaling was successful, false otherwise
        """
        logging.debug("Changing to state " + str(state))
        self._cp_state = state
        return True
