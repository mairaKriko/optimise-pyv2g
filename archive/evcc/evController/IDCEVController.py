#######################################################
# 
# IDCEVController.py
# Python implementation of the Interface IDCEVController
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:01:30
# Original author: Fabian.Stichtenoth
# 
#######################################################
from shared.v2gMessages.msgDef.DCEVStatusType import DCEVStatusType
from shared.v2gMessages.msgDef.DCEVPowerDeliveryParameterType import DCEVPowerDeliveryParameterType
from shared.v2gMessages.msgDef.PhysicalValueType import PhysicalValueType
from evcc.evController.IEVController import IEVController


class IDCEVController(IEVController):

    def get_dc_ev_charge_parameter(self):
        """Returns the charge parameter for AC charging
        :return JAXBElement<DCEVChargeParameterType>: The battery specific charge parameter for the current charging
        session
        """
        pass

    def get_dc_ev_status(self) -> DCEVStatusType:
        """Returns the EV status parameter for DC charging
        :return DCEVStatusType: The EV status for DC charging for the current charging session
        """
        pass

    def get_ev_power_delivery_parameter(self) -> DCEVPowerDeliveryParameterType:
        """Returns the DC_EVPowerDeliverParameter
        :return DCEVPowerDeliveryParameterType: The DC_EVPowerDeliverParameter
        """
        pass

    def get_maximum_current_limit(self) -> PhysicalValueType:
        """Returns the maximum current limit for DC charging
        :return PhysicalValueType: The maximum current given as a PhysicalValueType
        """
        pass

    def get_maximum_power_limit(self) -> PhysicalValueType:
        """Returns the maximum power limit for DC charging
        :return PhysicalValueType: The maximum power given as a PhysicalValueType
        """
        pass

    def get_maximum_voltage_limit(self) -> PhysicalValueType:
        """Returns the maximum voltage limit for DC charging
        :return PhysicalValueType: The maximum voltage given as a PhysicalValueType
        """
        pass

    def get_remaining_time_to_bulk_soc(self) -> PhysicalValueType:
        """Returns the estimated or calculated time until bulk charge (approx. 80% SOC) is
        complete
        :return PhysicalValueType: The estimated time given as a PhysicalValueType
        """
        pass

    def get_remaining_time_to_full_soc(self) -> PhysicalValueType:
        """Returns the estimated or calculated time until full charge (100% SOC) is
        complete
        :return PhysicalValueType: The estimated time given as a PhysicalValueType
        """
        pass

    def get_target_current(self) -> PhysicalValueType:
        """Returns the target current for DC charging
        :return PhysicalValueType: Target current given as a PhysicalValueType
        """
        pass

    def get_target_voltage(self) -> PhysicalValueType:
        """Returns the target voltage for DC charging
        :return PhysicalValueType: Target voltage given as a PhysicalValueType
        """
        pass

    def is_bulk_charging_complete(self) -> bool:
        """If set to TRUE, the EV indicates that bulk charging (approx. 80% SOC) is
        complete.
        :return bool: True, if bulk charge is complete, false otherwise
        """
        pass

    def is_charging_complete(self) -> bool:
        """If set to TRUE, the EV indicates that charging process is complete.
        :return bool: True, if charging process is complete, false otherwise
        """
        pass
