#######################################################
# 
# IEVController.py
# Python implementation of the Interface IEVController
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:01:14
# Original author: Fabian.Stichtenoth
# 
#######################################################
from shared.v2gMessages.msgDef.ChargingProfileType import ChargingProfileType
from evcc.session.V2GCommunicationSessionEVCC import V2GCommunicationSessionEVCC
from evcc.evController.IDCEVController import IDCEVController
from evcc.evController.IACEVController import IACEVController


class IEVController(IDCEVController, IACEVController):

    def get_charging_profile(self) -> ChargingProfileType:
        """Returns the specific charging profile for the current charging session (i.e.
        maximum amount of power drawn over time)
        :return ChargingProfileType: The charging profile with a list of profile entries
        """
        pass

    def get_chosen_sa_schedule_tuple_id(self):
        """Returns the unique identifier within a charging session for a SAScheduleTuple
        element contained in the list of SASchedules delivered by the EVSE. An
        SAScheduleTupleID remains a unique identifier for one schedule throughout a
        charging session.
        :return int: The unique ID given as a short value
        """
        pass

    def get_cp_state(self):
        """Returns the current CP state according IEC 61851-1 (State A, B, C or D)
        :return CPStates: The respective CP state
        """
        pass

    def get_payment_option(self, payment_options_offered):
        """Returns the user-chosen payment method, either external identification means
        (EIM) such as an RFID card or via Plug-and-Charge (PnC)
        :param payment_options_offered:
        :return PaymentOptionType: The payment option Contract or ExternalPayment
        """
        pass

    def get_requested_energy_transfer_mode(self):
        """Returns the EnergyTransferMode chosen by the driver
        :return bool: The chosen EnergyTransferMode
        """
        pass

    def is_charging_loop_active(self) -> bool:
        """Provides information on whether the charging loop should be active to charge
        the EV's battery, or not
           @return True, if charging process should be continued, false otherwise
        """
        pass

    def set_comm_session_context(self, comm_session_context: V2GCommunicationSessionEVCC):
        """Provides a reference to the current communication session for this controller
        instance.
        :param comm_session_context: V2GCommunicationSessionEVCC
        :return None:
        """
        pass

    def set_cp_state(self, state) -> bool:
        """Signals a CP state according to IEC 61851-1 (State A, B, C or D)
        :param state:
        :return bool: True, if the state signaling was successful, false otherwise
        """
        pass
