#######################################################
# 
# WaitForCurrentDemandReq.py
# Python implementation of the Class WaitForCurrentDemandReq
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:58:32
# Original author: Fabian.Stichtenoth
# 
#######################################################
from shared.v2gMessages.msgDef.CurrentDemandResType import CurrentDemandResType
from shared.v2gMessages.msgDef.CurrentDemandReqType import CurrentDemandReqType
from shared.v2gMessages.msgDef.BodyBaseType import BodyBaseType
from shared.v2gMessages.msgDef.V2GMessage import V2GMessage
from shared.v2gMessages.msgDef.EVSENotificationType import EVSENotificationType
from shared.v2gMessages.msgDef.PaymentOptionType import PaymentOptionType
from shared.v2gMessages.msgDef.ResponseCodeType import ResponseCodeType
from shared.messageHandling.ReactionToIncomingMessage import ReactionToIncomingMessage
from shared.misc.V2GCommunicationSession import V2GCommunicationSession
from shared.enumerations.V2GMessages import V2GMessages
from secc.session.V2GCommunicationSessionSECC import V2GCommunicationSessionSECC
from secc.states.ServerState import ServerState
from secc.states.ForkState import ForkState
from secc.evseController.IDCEVSEController import IDCEVSEController
from secc.evseController.IEVSEController import IEVSEController


class WaitForCurrentDemandReq(ServerState):

    def __init__(self, comm_session_context: V2GCommunicationSessionSECC):
        super().__init__(comm_session_context)
        self._current_demand_res: CurrentDemandResType = CurrentDemandResType()

    def get_response_message(self) -> BodyBaseType:
        """
        Returns the _current_demand_res
        :return _current_demand_res: CurrentDemandResType
        """
        return self._current_demand_res

    def process_incoming_message(self, message) -> ReactionToIncomingMessage:
        """
        Checks if incoming message is valid and if so, creates evse_controller to set _current_demand_res-parameters.
        Checks for payment option to determine if receipt is required and if so, returns get_send_message with
        METERING_RECEIPT_REQ Response Code. If not, FORK Response Code is used and FAILED_SEQUENCE_ERROR on failure
        :param message:
        :return: get_send_message
        """
        if self.is_incoming_message_valid(message, CurrentDemandReqType.__class__, self._current_demand_res):
            v2g_message_req: V2GMessage = message
            current_demand_req: CurrentDemandReqType = v2g_message_req.get_body().get_body_element().get_value()

            evse_controller: IDCEVSEController = self.get_comm_session_context().get_dc_evse_controller()

            evse_controller.set_ev_maximum_current_limit(current_demand_req.get_ev_maximum_current_limit())
            evse_controller.set_ev_maximum_voltage_limit(current_demand_req.get_ev_maximum_voltage_limit())
            evse_controller.set_ev_maximum_power_limit(current_demand_req.get_ev_maximum_power_limit())
            evse_controller.set_target_current(current_demand_req.get_ev_target_current())
            evse_controller.set_target_voltage(current_demand_req.get_ev_target_voltage())

            self._current_demand_res.set_dc_evse_status(evse_controller.get_dc_evse_status(EVSENotificationType.NONE))

            self._current_demand_res.set_evse_current_limit_achieved(evse_controller.is_evse_current_limit_achieved())
            self._current_demand_res.set_evse_voltage_limit_achieved(evse_controller.is_evse_voltage_limit_achieved())
            self._current_demand_res.set_evse_power_limit_achieved(evse_controller.is_evse_power_limit_achieved())
            self._current_demand_res.set_evse_id(evse_controller.get_evse_id())
            self._current_demand_res.set_evse_maximum_current_limit(evse_controller.get_evse_maximum_current_limit())
            self._current_demand_res.set_evse_maximum_voltage_limit(evse_controller.get_evse_maximum_voltage_limit())
            self._current_demand_res.set_evse_maximum_power_limit(evse_controller.get_evse_maximum_power_limit())
            self._current_demand_res.set_evse_present_current(evse_controller.get_present_current())
            self._current_demand_res.set_evse_present_voltage(evse_controller.get_present_voltage())
            self._current_demand_res.set_meter_info(evse_controller.get_meter_info())
            self.get_comm_session_context().set_sent_meter_info(evse_controller.get_meter_info())
            self._current_demand_res.set_sa_schedule_tuple_id(
                self.get_comm_session_context().get_chosen_sa_schedule_tuple())

            if self.get_comm_session_context().get_selected_payment_option() == PaymentOptionType.EXTERNAL_PAYMENT:
                self._current_demand_res.set_receipt_required(False)

            else:
                self._current_demand_res.set_receipt_required(True)

            if self._current_demand_res.is_receipt_required():
                return self.get_send_message(self._current_demand_res, V2GMessages.METERING_RECEIPT_REQ)

            else:
                self.get_comm_session_context().get_states().get(V2GMessages.FORK).get_allowed_requests().append(
                    V2GMessages.CURRENT_DEMAND_REQ)
                self.get_comm_session_context().get_states().get(V2GMessages.FORK).get_allowed_requests().append(
                    V2GMessages.POWER_DELIVERY_REQ)

                return self.get_send_message(self._current_demand_res, V2GMessages.FORK)

        else:
            if self._current_demand_res.get_response_code() == ResponseCodeType.FAILED_SEQUENCE_ERROR:
                response_message = self.get_sequence_error_res_message(CurrentDemandResType(), message)
                return self.get_send_message(response_message, V2GMessages.NONE,
                                             self._current_demand_res.get_response_code())

            else:
                self.set_mandatory_fields_for_failed_res(self._current_demand_res,
                                                         self._current_demand_res.get_response_code())

        return self.get_send_message(self._current_demand_res, V2GMessages.NONE,
                                     self._current_demand_res.get_response_code())
