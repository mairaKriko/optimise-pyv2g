#######################################################
# 
# WaitForCableCheckReq.py
# Python implementation of the Class WaitForCableCheckReq
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:56:53
# Original author: Fabian.Stichtenoth
# 
#######################################################
from shared.v2gMessages.msgDef.ResponseCodeType import ResponseCodeType
from shared.v2gMessages.msgDef.EVSENotificationType import EVSENotificationType
from shared.v2gMessages.msgDef.EVSEProcessingType import EVSEProcessingType
from shared.v2gMessages.msgDef.IsolationLevelType import IsolationLevelType
from shared.v2gMessages.msgDef.V2GMessage import V2GMessage
from shared.v2gMessages.msgDef.CableCheckResType import CableCheckResType
from shared.v2gMessages.msgDef.BodyBaseType import BodyBaseType
from shared.messageHandling.ReactionToIncomingMessage import ReactionToIncomingMessage
from secc.session.V2GCommunicationSessionSECC import V2GCommunicationSessionSECC
from shared.enumerations.V2GMessages import V2GMessages
from shared.misc.State import State
from secc.states.ServerState import ServerState
from secc.evseController.IDCEVSEController import IDCEVSEController


class WaitForCableCheckReq(ServerState):

    def __init__(self, comm_session_context):
        super().__init__(comm_session_context)
        self._cable_check_res: CableCheckResType = CableCheckResType()
        self._evse_processing_finished: bool = False
        pass

    def get_response_message(self):
        """
        Returns the _cable_check_res
        :return _cable_check_res: CableCheckResType
        """
        return self._cable_check_res

    def is_evse_processing_finished(self):
        """
        Returns a parameter that indicates if evse processing was finished
        :return _evse_processing_finished: bool
        """
        return self._evse_processing_finished

    def process_incoming_message(self, message):
        """
        Initiates check if message is valid. If so, sets evse processing to finished, sets parameters and calls
        get_send_message on PRE_CHARGE_REQ Response Code. If something goes wrong, get_send_message is called on
        FAILED_SEQUENCE_ERROR Response Code
        :param message:
        :return: get_send_message
        """
        if self.is_incoming_message_valid(message, CableCheckResType.__class__, self._cable_check_res):
            v2g_message_req: V2GMessage = message
            cable_check_req = v2g_message_req.get_body().get_body_element().get_value()

            self.set_evse_processing_finished(True)

            if self.is_evse_processing_finished():
                self.get_comm_session_context().get_dc_evse_controller().set_isolation_level(IsolationLevelType.VALID)

                self._cable_check_res.set_evse_processing(EVSEProcessingType.FINISHED)
                self._cable_check_res.set_dc_evse_status(
                    self.get_comm_session_context().get_dc_evse_controller().get_dc_evse_status(
                        EVSENotificationType.NONE))
                return self.get_send_message(self._cable_check_res, V2GMessages.PRE_CHARGE_REQ)

            else:
                self._cable_check_res.set_evse_processing(EVSEProcessingType.ONGOING)
                return self.get_send_message(self._cable_check_res, V2GMessages.CABLE_CHECK_REQ)

        else:
            if self._cable_check_res.get_response_code() == ResponseCodeType.FAILED_SEQUENCE_ERROR:
                response_message = self.get_sequence_error_res_message(CableCheckResType(), message)
                return self.get_send_message(
                    response_message, V2GMessages.NONE, self._cable_check_res.get_response_code())

            else:
                self.set_mandatory_fields_for_failed_res(
                    self._cable_check_res, self._cable_check_res.get_response_code())

    def set_evse_processing_finished(self, evse_processing_finished):
        """
        Sets the _evse_processing_finished parameter
        :param evse_processing_finished:
        :return: None
        """
        self._evse_processing_finished = evse_processing_finished
