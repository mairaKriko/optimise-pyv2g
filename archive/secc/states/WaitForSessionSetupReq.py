#######################################################
# 
# WaitForSessionSetupReq.py
# Python implementation of the Class WaitForSessionSetupReq
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 12:00:55
# Original author: Fabian.Stichtenoth
# 
#######################################################
import time

from shared.v2gMessages.msgDef.SessionSetupResType import SessionSetupResType
from shared.v2gMessages.msgDef.SessionSetupReqType import SessionSetupReqType
from shared.v2gMessages.msgDef.BodyBaseType import BodyBaseType
from shared.v2gMessages.msgDef.ResponseCodeType import ResponseCodeType
from shared.messageHandling.ReactionToIncomingMessage import ReactionToIncomingMessage
from shared.enumerations.V2GMessages import V2GMessages
from secc.session.V2GCommunicationSessionSECC import V2GCommunicationSessionSECC
from secc.states.ServerState import ServerState
from secc.evseController.IEVSEController import IEVSEController


class WaitForSessionSetupReq(ServerState):

    def __init__(self, comm_session_context: V2GCommunicationSessionSECC):
        super().__init__(comm_session_context)
        self._session_setup_res: SessionSetupResType = SessionSetupResType()

    def get_response_message(self) -> BodyBaseType:
        """
        Returns the _session_setup_res
        :return _session_setup_res: BodyBaseType
        """
        return self._session_setup_res

    def process_incoming_message(self, message) -> ReactionToIncomingMessage:
        """
        Initiates check if message is valid and acts according to it. If not, checks for response code and calls
        get_send_message based on FAILED_SEQUENCE_ERROR if that's the response code. If everything is ok,
        get_send_message is called on SERVICE_DISCOVERY_REQ
        :param message:
        :return:
        """
        if self.is_incoming_message_valid(message, SessionSetupReqType.__class__, self._session_setup_res):
            self._session_setup_res.set_eves_id(self.get_comm_session_context().get_evse_controller().get_evse_id())
            self._session_setup_res.set_evse_timestamp(round(time.time()))

        else:
            if self._session_setup_res.get_response_code() == ResponseCodeType.FAILED_SEQUENCE_ERROR:
                response_message = self.get_sequence_error_res_message(SessionSetupResType(), message)

                return self.get_send_message(response_message, V2GMessages.NONE,
                                             self._session_setup_res.get_response_code())

            else:
                self.set_mandatory_fields_for_failed_res(self._session_setup_res,
                                                         self._session_setup_res.get_response_code())

        if str(self._session_setup_res.get_response_code()).startswith("OK"):
            v2g_mes = V2GMessages.SERVICE_DISCOVERY_REQ

        else:
            v2g_mes = V2GMessages.NONE

        return self.get_send_message(self._session_setup_res, v2g_mes, self._session_setup_res.get_response_code())
