#######################################################
# 
# WaitForChargeParameterDiscoveryReq.py
# Python implementation of the Class WaitForChargeParameterDiscoveryReq
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:58:01
# Original author: Fabian.Stichtenoth
# 
#######################################################
import logging
from lxml import etree

from shared.v2gMessages.msgDef.V2GMessage import V2GMessage
from shared.v2gMessages.msgDef.DCEVChargeParameterType import DCEVChargeParameterType
from shared.v2gMessages.msgDef.ACEVChargeParameterType import ACEVChargeParameterType
from shared.v2gMessages.msgDef.ResponseCodeType import ResponseCodeType
from shared.v2gMessages.msgDef.ChargeParameterDiscoveryResType import ChargeParameterDiscoveryResType
from shared.v2gMessages.msgDef.BodyBaseType import BodyBaseType
from shared.v2gMessages.msgDef.SAScheduleListType import SAScheduleListType
from shared.v2gMessages.msgDef.ChargeParameterDiscoveryReqType import ChargeParameterDiscoveryReqType
from shared.v2gMessages.msgDef.EVSEProcessingType import EVSEProcessingType
from shared.v2gMessages.msgDef.PhysicalValueType import PhysicalValueType
from shared.v2gMessages.msgDef.DCEVStatusType import DCEVStatusType
from shared.enumerations.V2GMessages import V2GMessages
from shared.messageHandling.ReactionToIncomingMessage import ReactionToIncomingMessage
from secc.session.V2GCommunicationSessionSECC import V2GCommunicationSessionSECC
from secc.states.ServerState import ServerState
from shared.misc.V2GCommunicationSession import V2GCommunicationSession
from shared.misc.State import State


class WaitForChargeParameterDiscoveryReq(ServerState):

    def __init__(self, comm_session_context: V2GCommunicationSessionSECC):
        super().__init__(comm_session_context)
        self._charge_parameter_discovery_res: ChargeParameterDiscoveryResType = ChargeParameterDiscoveryResType()
        self._waiting_for_schedule: bool = False

    def get_response_message(self) -> BodyBaseType:
        """
        Returns the _charge_parameter_discovery_res
        :return _charge_parameter_discovery_res: ChargeParameterDiscoveryResType
        """
        return self._charge_parameter_discovery_res

    @staticmethod
    def __get_sa_schedules_as_jaxbelement(sa_schedule_list: SAScheduleListType):
        """
        Creates XML-element of sa_schedule_list and returns it
        :param sa_schedule_list: SAScheduleListType
        :return library:
        """
        # TODO: JAXBElement needs to be changed
        xml_cont: dict = vars(sa_schedule_list)

        library = etree.Element(str("urn_iso_15118_2_2013_MsgDataTypes"))

        for k, v in xml_cont.items():
            element = etree.SubElement(library, 'SAScheduleList')
            element.set(str(k), v)

        return library

    def is_response_code_ok(self, charge_parameter_discovery_req: ChargeParameterDiscoveryReqType) -> bool:
        """
        Checks if requested EnergyTransferModeType is supported, then checks if EnergyTransferMode is also supplied and
        finally checks charge parameters. Returns True if everything is ok, False otherwise
        :param charge_parameter_discovery_req:
        :return: bool
        """
        evse_supported = self.get_comm_session_context().get_supported_energy_transfer_modes()
        ev_requested = charge_parameter_discovery_req.get_requested_energy_transfermode()

        if ev_requested not in evse_supported:
            self._charge_parameter_discovery_res.set_response_code(ResponseCodeType.FAILED_WRONG_ENERGY_TRANSFER_MODE)
            return False

        if isinstance(charge_parameter_discovery_req.get_ev_charge_parameter().get_value(), ACEVChargeParameterType) \
                and str(ev_requested).startswith("DC") or \
                isinstance(charge_parameter_discovery_req.get_ev_charge_parameter().get_value(),
                           DCEVChargeParameterType) and str(ev_requested).startswith("DC"):
            logging.error(
                charge_parameter_discovery_req.get_ev_charge_parameter().get_value().__class__.__name__
                + " does not fit to EnergyTransferMode '" + str(ev_requested) + "'")
            self._charge_parameter_discovery_res.set_response_code(ResponseCodeType.FAILED_WRONG_ENERGY_TRANSFER_MODE)
            return False

        if not self.__verify_charge_parameter(charge_parameter_discovery_req):
            self._charge_parameter_discovery_res.set_response_code(ResponseCodeType.FAILED_WRONG_CHARGE_PARAMETER)
            return False

        return True

    def is_waiting_for_schedule(self) -> bool:
        """
        Returns a parameter that indicates if one's still waiting for schedule
        :return: bool
        """
        return self._waiting_for_schedule

    def process_incoming_message(self, message) -> ReactionToIncomingMessage:
        """
        Initiates check if message is valid and also checks response code. Sets waiting for schedule to True and logs
        departure time. Calls charge parameters dependent on energy transfermode. Last, calls get_send_message based on
        SA schedules. If there are none, Response Code is CHARGE_PARAMETER_DISCOVERY_REQ, otherwise it is
        POWER_DELIVERY_REQ or CABLE_CHECK_REQ. If something goes wrong, Response Code is NONE
        :param message:
        :return: get_send_message
        """
        if self.is_incoming_message_valid(message, ChargeParameterDiscoveryReqType.__class__,
                                          self._charge_parameter_discovery_res):
            v2g_message_req: V2GMessage = message
            charge_parameter_discovery_req: ChargeParameterDiscoveryReqType = v2g_message_req.get_body(). \
                get_body_element().get_value()

            if self.is_response_code_ok(charge_parameter_discovery_req):
                self.get_comm_session_context().set_requested_energy_transfermode(
                    charge_parameter_discovery_req.get_requested_energy_transfermode())

                if not self.is_waiting_for_schedule():
                    self.__set_waiting_for_schedule(True)

                    if charge_parameter_discovery_req.get_max_entries_sa_schedule_tuple() is not None:
                        max_entries_sa_schedule_tuple = charge_parameter_discovery_req. \
                            get_max_entries_sa_schedule_tuple()

                    else:
                        max_entries_sa_schedule_tuple = 1024

                    departure_time = charge_parameter_discovery_req.get_ev_charge_parameter().get_value(). \
                        get_departure_time()

                    if departure_time is not None:
                        dep_time = int(departure_time)

                    else:
                        dep_time = 0

                    self.get_comm_session_context().set_sa_schedules(
                        self.get_comm_session_context().get_backend_interface().get_sa_schedule_list(
                            max_entries_sa_schedule_tuple, dep_time, self.get_xml_signature_ref_elements())
                    )

                if str(charge_parameter_discovery_req.get_requested_energy_transfermode()).startswith("AC"):
                    self._charge_parameter_discovery_res.set_evse_charge_parameter(
                        self.get_comm_session_context().get_ac_evse_controller()).get_ac_evse_charge_parameter()

                else:
                    self._charge_parameter_discovery_res.set_evse_charge_parameter(
                        self.get_comm_session_context().get_dc_evse_controller()).get_dc_evse_charge_parameter()

                if self.get_comm_session_context().get_sa_schedules() is None:
                    logging.debug("No SAScheduleList available yet, setting EVSEProcessingType to ONGOING")
                    self._charge_parameter_discovery_res.set_evse_processing(EVSEProcessingType.ONGOING)
                    return self.get_send_message(self._charge_parameter_discovery_res,
                                                 V2GMessages.CHARGE_PARAMETER_DISCOVERY_REQ)

                else:
                    logging.debug("SAScheduleList has been provided")
                    self._charge_parameter_discovery_res.set_evse_processing(EVSEProcessingType.FINISHED)
                    self.__set_waiting_for_schedule(False)
                    self._charge_parameter_discovery_res.set_saschedules(
                        self.__get_sa_schedules_as_jaxbelement(self.get_comm_session_context().get_sa_schedules()))

                    self.set_signature_private_key(
                        self.get_comm_session_context().get_backend_interface().get_mo_sub_ca2private_key())

                    if str(charge_parameter_discovery_req.get_requested_energy_transfermode()).startswith("AC"):
                        return self.get_send_message(self._charge_parameter_discovery_res,
                                                     V2GMessages.POWER_DELIVERY_REQ)

                    else:
                        return self.get_send_message(self._charge_parameter_discovery_res,
                                                     V2GMessages.CABLE_CHECK_REQ)

            else:
                self.set_mandatory_fields_for_failed_res(self._charge_parameter_discovery_res,
                                                         self._charge_parameter_discovery_res.get_response_code())

        else:
            if self._charge_parameter_discovery_res.get_response_code() == ResponseCodeType.FAILED_SEQUENCE_ERROR:
                response_message = self.get_sequence_error_res_message(ChargeParameterDiscoveryResType(), message)
                return self.get_send_message(response_message, V2GMessages.NONE,
                                             self._charge_parameter_discovery_res.get_response_code())

            else:
                self.set_mandatory_fields_for_failed_res(self._charge_parameter_discovery_res,
                                                         self._charge_parameter_discovery_res.get_response_code())

        return self.get_send_message(self._charge_parameter_discovery_res, V2GMessages.NONE,
                                     self._charge_parameter_discovery_res.get_response_code())

    def __set_waiting_for_schedule(self, waiting_for_schedule: bool):
        """
        Sets the _waiting_for_schedule parameter
        :param waiting_for_schedule: bool
        :return: None
        """
        self._waiting_for_schedule = waiting_for_schedule

    @staticmethod
    def __verify_charge_parameter(charge_parameter_discovery_req: ChargeParameterDiscoveryReqType) -> bool:
        """
        Checks if there are charge parameters and if so checks if AC or DC. Checks that all charge parameters are
        neither None, nor out of range. Returns True if everything is ok, False otherwise
        :param charge_parameter_discovery_req: ChargeParameterDiscoveryReqType
        :return: bool
        """
        if charge_parameter_discovery_req.get_ev_charge_parameter() is None:
            logging.error("EVChargeParameter is empty (null)")
            return False

        if isinstance(charge_parameter_discovery_req.get_ev_charge_parameter().get_value, ACEVChargeParameterType):
            ac_ev_charge_parameter: ACEVChargeParameterType = charge_parameter_discovery_req.get_ev_charge_parameter() \
                .get_value()

            if (
                    ac_ev_charge_parameter.get_e_amount() is None
                    or ac_ev_charge_parameter.get_ev_max_voltage() is None
                    or ac_ev_charge_parameter.get_ev_max_current() is None
                    or ac_ev_charge_parameter.get_ev_min_current() is None
            ) or (
                    ac_ev_charge_parameter.get_e_amount().get_value() < 0
                    or ac_ev_charge_parameter.get_e_amount().get_value() *
                    pow(10, ac_ev_charge_parameter.get_e_amount().get_multiplier()) > 200000
                    or ac_ev_charge_parameter.get_ev_max_voltage().get_value() < 0
                    or ac_ev_charge_parameter.get_ev_max_voltage().get_value() *
                    pow(10, ac_ev_charge_parameter.get_ev_max_voltage().get_multiplier()) > 1000
                    or ac_ev_charge_parameter.get_ev_max_current().get_value() < 0
                    or ac_ev_charge_parameter.get_ev_max_current().get_value() *
                    pow(10, ac_ev_charge_parameter.get_ev_max_current().get_multiplier()) > 400
                    or ac_ev_charge_parameter.get_ev_min_current().get_value() < 0
                    or ac_ev_charge_parameter.get_ev_min_current().get_value() *
                    pow(10, ac_ev_charge_parameter.get_ev_min_current().get_multiplier()) > 400
            ):
                logging.error("One of the AC_EVChargeParameter elements is either null or out of range")
                return False

        if isinstance(charge_parameter_discovery_req.get_ev_charge_parameter().get_value(), DCEVChargeParameterType):
            dc_ev_charge_parameter: DCEVChargeParameterType = charge_parameter_discovery_req.get_ev_charge_parameter()\
                .get_value()

            if (
                    dc_ev_charge_parameter.get_dc_ev_status() is None
                    or dc_ev_charge_parameter.get_ev_maximum_current_limit() is None
                    or dc_ev_charge_parameter.get_ev_maximum_voltage_limit() is None
            ) or (
                    dc_ev_charge_parameter.get_dc_ev_status().get_ev_ress_soc() < b'0'
                    or dc_ev_charge_parameter.get_dc_ev_status().get_ev_ress_soc() > b'100'
                    or dc_ev_charge_parameter.get_ev_maximum_current_limit().get_value() < 0
                    or dc_ev_charge_parameter.get_ev_maximum_current_limit().get_value() *
                    pow(10, dc_ev_charge_parameter.get_ev_maximum_current_limit().get_multiplier()) > 400
                    or dc_ev_charge_parameter.get_ev_maximum_voltage_limit().get_value() < 0
                    or dc_ev_charge_parameter.get_ev_maximum_voltage_limit().get_value() *
                    pow(10, dc_ev_charge_parameter.get_ev_maximum_voltage_limit().get_multiplier()) > 1000
                    or (
                            dc_ev_charge_parameter.get_ev_maximum_power_limit() is not None
                            and (
                                    dc_ev_charge_parameter.get_ev_maximum_power_limit().get_value() < 0
                                    or dc_ev_charge_parameter.get_ev_maximum_power_limit().get_value() *
                                    pow(10, dc_ev_charge_parameter.get_ev_energy_capacity().get_multiplier()) > 200000
                            )
                    ) or (
                            dc_ev_charge_parameter.get_ev_energy_capacity() is not None
                            and (
                                    dc_ev_charge_parameter.get_ev_energy_capacity().get_value() < 0
                                    or dc_ev_charge_parameter.get_ev_energy_capacity().get_value() *
                                    pow(10, dc_ev_charge_parameter.get_ev_energy_capacity().get_multiplier()) > 200000
                            )
                    ) or (
                            dc_ev_charge_parameter.get_ev_energy_request() is not None
                            and (
                                    dc_ev_charge_parameter.get_ev_energy_request().get_value() < 0
                                    or dc_ev_charge_parameter.get_ev_energy_request().get_value() *
                                    pow(10, dc_ev_charge_parameter.get_ev_energy_request().get_multiplier()) > 200000
                            )
                    ) or (
                            dc_ev_charge_parameter.get_full_soc() is not None
                            and (
                                    dc_ev_charge_parameter.get_full_soc() < 0
                                    or dc_ev_charge_parameter.get_full_soc() > 100
                            )
                    ) or (
                            dc_ev_charge_parameter.get_bulk_soc() is not None
                            and (
                                    dc_ev_charge_parameter.get_bulk_soc() < 0
                                    or dc_ev_charge_parameter.get_bulk_soc() > 100
                            )
                    )
            ):
                logging.error("One of the DC_EVChargeParameter elements is either null or out of range")
                return False

        return True
