#######################################################
# 
# WaitForChargingStatusReq.py
# Python implementation of the Class WaitForChargingStatusReq
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:58:15
# Original author: Fabian.Stichtenoth
# 
#######################################################
from shared.v2gMessages.msgDef.ChargingStatusResType import ChargingStatusResType
from shared.v2gMessages.msgDef.ChargingStatusReqType import ChargingStatusReqType
from shared.v2gMessages.msgDef.BodyBaseType import BodyBaseType
from shared.v2gMessages.msgDef.EVSENotificationType import EVSENotificationType
from shared.v2gMessages.msgDef.PaymentOptionType import PaymentOptionType
from shared.v2gMessages.msgDef.ResponseCodeType import ResponseCodeType
from shared.messageHandling.ReactionToIncomingMessage import ReactionToIncomingMessage
from shared.enumerations.V2GMessages import V2GMessages
from secc.session.V2GCommunicationSessionSECC import V2GCommunicationSessionSECC
from secc.states.ServerState import ServerState
from secc.states.ForkState import ForkState
from secc.evseController.IEVSEController import IEVSEController


class WaitForChargingStatusReq(ServerState):

    def __init__(self, comm_session_context: V2GCommunicationSessionSECC):
        super().__init__(comm_session_context)
        self._charging_status_res: ChargingStatusResType = ChargingStatusResType()

    def get_response_message(self) -> BodyBaseType:
        return self._charging_status_res

    def process_incoming_message(self, message) -> ReactionToIncomingMessage:
        if self.is_incoming_message_valid(message, ChargingStatusReqType.__class__, self._charging_status_res):
            self._charging_status_res.set_evse_id(
                self.get_comm_session_context().get_ac_evse_controller().get_evse_id())
            self._charging_status_res.set_sa_schedule_tuple_id(
                self.get_comm_session_context().get_chosen_sa_schedule_tuple())
            self._charging_status_res.set_ac_evse_status(
                self.get_comm_session_context().get_ac_evse_controller().get_ac_evse_status(EVSENotificationType.NONE))

            if self.get_comm_session_context().get_selected_payment_option() == PaymentOptionType.EXTERNAL_PAYMENT:
                self._charging_status_res.set_receipt_required(False)

            else:
                self._charging_status_res.set_receipt_required(False)

            meter_info = self.get_comm_session_context().get_ac_evse_controller().get_meter_info()
            self._charging_status_res.set_meter_info(meter_info)
            self.get_comm_session_context().set_sent_meter_info(meter_info)

            if self._charging_status_res.is_receipt_required():
                return self.get_send_message(self._charging_status_res, V2GMessages.METERING_RECEIPT_REQ, )

            else:
                self.get_comm_session_context().get_states().get(V2GMessages.FORK).get_allowed_requests().append(
                    V2GMessages.CHARGING_STATUS_REQ)
                self.get_comm_session_context().get_states().get(V2GMessages.FORK).get_allowed_requests().append(
                    V2GMessages.POWER_DELIVERY_REQ)

                return self.get_send_message(self._charging_status_res, V2GMessages.FORK)

        else:
            if self._charging_status_res.get_response_code() == ResponseCodeType.FAILED_SEQUENCE_ERROR:
                response_message = self.get_sequence_error_res_message(ChargingStatusResType(), message)
                return self.get_send_message(response_message, V2GMessages.NONE,
                                             self._charging_status_res.get_response_code())

            else:
                self.set_mandatory_fields_for_failed_res(self._charging_status_res,
                                                         self._charging_status_res.get_response_code())

        return self.get_send_message(self._charging_status_res, V2GMessages.NONE,
                                     self._charging_status_res.get_response_code())
