#######################################################
# 
# WaitForPaymentServiceSelectionReq.py
# Python implementation of the Class WaitForPaymentServiceSelectionReq
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:59:26
# Original author: Fabian.Stichtenoth
# 
#######################################################
import logging

from shared.v2gMessages.msgDef.PaymentServiceSelectionResType import PaymentServiceSelectionResType
from shared.v2gMessages.msgDef.BodyBaseType import BodyBaseType
from shared.v2gMessages.msgDef.PaymentServiceSelectionReqType import PaymentServiceSelectionReqType
from shared.v2gMessages.msgDef.ServiceType import ServiceType
from shared.v2gMessages.msgDef.ResponseCodeType import ResponseCodeType
from shared.v2gMessages.msgDef.PaymentOptionListType import PaymentOptionListType
from shared.v2gMessages.msgDef.V2GMessage import V2GMessage
from shared.v2gMessages.msgDef.PaymentOptionType import PaymentOptionType
from shared.messageHandling.ReactionToIncomingMessage import ReactionToIncomingMessage
from shared.misc.V2GCommunicationSession import V2GCommunicationSession
from shared.enumerations.V2GMessages import V2GMessages
from secc.session.V2GCommunicationSessionSECC import V2GCommunicationSessionSECC
from secc.states.ServerState import ServerState


class WaitForPaymentServiceSelectionReq(ServerState):

    def __init__(self, comm_session_context: V2GCommunicationSessionSECC):
        super().__init__(comm_session_context)
        self._payment_service_selection_res: PaymentServiceSelectionResType = PaymentServiceSelectionResType()

    def get_response_message(self) -> BodyBaseType:
        """
        Returns the _payment_service_selection_res
        :return _payment_service_selection_res: BodyBaseType
        """
        return self._payment_service_selection_res

    def is_response_code_ok(self, payment_service_selection_req: PaymentServiceSelectionReqType) -> bool:
        """
        Checks if selected service is offered and returns False if not. Also checks if charge service was selected and
        if selected payment option is valid. Returns True if everything is ok
        :param payment_service_selection_req: PaymentServiceSelectionReqType
        :return: bool
        """
        charge_service_selected: bool = False

        for selected_service in payment_service_selection_req.get_selected_service_list().get_selected_service():
            selected_service_offered = False

            for offered_service in self.get_comm_session_context().get_offered_services():
                if offered_service.get_service_id() == selected_service.get_service_id():
                    selected_service_offered = True
                    break

            if not selected_service_offered:
                logging.error("Selected service with ID " + selected_service.get_service_id() + " is not offered")
                self._payment_service_selection_res.set_response_code(ResponseCodeType.FAILED_SERVICE_SELECTION_INVALID)
                return False

            if selected_service.get_service_id() == 1:
                charge_service_selected = True
                break

        if not charge_service_selected:
            self._payment_service_selection_res.set_response_code(ResponseCodeType.FAILED_NO_CHARGE_SERVICE_SELECTED)
            return False

        if not payment_service_selection_req.get_selected_payment_option() in self.get_comm_session_context()\
                .get_payment_options().get_payment_option():
            self._payment_service_selection_res.set_response_code(ResponseCodeType.FAILED_PAYMENT_SELECTION_INVALID)
            return False

        return True

    def process_incoming_message(self, message) -> ReactionToIncomingMessage:
        """
        Checks if incoming message is valid and logs payment option. Also checks for response code. If payment option is
        contract, allowed requests are added.
        :param message:
        :return: get_send_message (ReactionToIncomingMessage)
        """
        if self.is_incoming_message_valid(message, PaymentServiceSelectionReqType.__class__,
                                          self._payment_service_selection_res):
            v2g_message_req: V2GMessage = message
            payment_service_selection_req: PaymentServiceSelectionReqType = v2g_message_req.get_body().\
                get_body_element().get_value()

            logging.info("Payment option " + str(payment_service_selection_req.get_selected_payment_option()) +
                         " has been chosen by EVCC")
            self.get_comm_session_context().set_selected_payment_option(
                payment_service_selection_req.get_selected_payment_option())

            if self.is_response_code_ok(payment_service_selection_req):
                if payment_service_selection_req.get_selected_payment_option() == PaymentOptionType.CONTRACT:
                    self.get_comm_session_context().get_states().get(V2GMessages.FORK).get_allowed_requests().append(
                        V2GMessages.PAYMENT_DETAILS_REQ)
                    self.get_comm_session_context().get_states().get(V2GMessages.FORK).get_allowed_requests().append(
                        V2GMessages.CERTIFICATE_INSTALLATION_REQ)
                    self.get_comm_session_context().get_states().get(V2GMessages.FORK).get_allowed_requests().append(
                        V2GMessages.CERTIFICATE_UPDATE_REQ)

                    return self.get_send_message(self._payment_service_selection_res, V2GMessages.FORK)

                else:
                    return self.get_send_message(self._payment_service_selection_res, V2GMessages.AUTHORIZATION_REQ)

            else:
                self.set_mandatory_fields_for_failed_res(self._payment_service_selection_res,
                                                         self._payment_service_selection_res.get_response_code())

        else:
            if self._payment_service_selection_res.get_response_code() == ResponseCodeType.FAILED_SEQUENCE_ERROR:
                response_message: BodyBaseType = self.get_sequence_error_res_message(PaymentServiceSelectionResType(),
                                                                                     message)
                return self.get_send_message(response_message, V2GMessages.NONE,
                                             self._payment_service_selection_res.get_response_code())

            else:
                self.set_mandatory_fields_for_failed_res(self._payment_service_selection_res,
                                                         self._payment_service_selection_res.get_response_code())

        return self.get_send_message(self._payment_service_selection_res, V2GMessages.NONE,
                                     self._payment_service_selection_res.get_response_code())
