#######################################################
# 
# WaitForServiceDetailReq.py
# Python implementation of the Class WaitForServiceDetailReq
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 12:00:12
# Original author: Fabian.Stichtenoth
# 
#######################################################
from shared.v2gMessages.msgDef.ServiceDetailResType import ServiceDetailResType
from shared.v2gMessages.msgDef.ParameterSetType import ParameterSetType
from shared.v2gMessages.msgDef.ParameterType import ParameterType
from shared.v2gMessages.msgDef.BodyBaseType import BodyBaseType
from shared.v2gMessages.msgDef.ServiceDetailReqType import ServiceDetailReqType
from shared.v2gMessages.msgDef.ResponseCodeType import ResponseCodeType
from shared.v2gMessages.msgDef.ServiceParameterListType import ServiceParameterListType
from shared.v2gMessages.msgDef.ServiceType import ServiceType
from shared.messageHandling.ReactionToIncomingMessage import ReactionToIncomingMessage
from shared.enumerations.V2GMessages import V2GMessages
from secc.session.V2GCommunicationSessionSECC import V2GCommunicationSessionSECC
from secc.states.ServerState import ServerState


class WaitForServiceDetailReq(ServerState):

    def __init__(self, comm_session_context: V2GCommunicationSessionSECC):
        super().__init__(comm_session_context)
        self._service_detail_res: ServiceDetailResType = ServiceDetailResType()

    @staticmethod
    def __get_certificate_installation_parameters() -> ParameterSetType:
        """
        Creates a parameter set for certificate installation and returns it
        :return: ParameterSetType
        """
        parameter_set = ParameterSetType()

        cert_installation = ParameterType()
        cert_installation.set_name("Service")
        cert_installation.set_string_value("Installation")

        parameter_set.get_parameter().append(cert_installation)
        parameter_set.set_parameter_set_id(1)

        return parameter_set

    @staticmethod
    def __get_certificate_update_parameters() -> ParameterSetType:
        """
        Creates a parameter set for certificate update and returns it
        :return: ParameterSetType
        """
        parameter_set = ParameterSetType()

        cert_update = ParameterType()
        cert_update.set_name("Service")
        cert_update.set_string_value("Update")

        parameter_set.get_parameter().append(cert_update)
        parameter_set.set_parameter_set_id(2)

        return parameter_set

    @staticmethod
    def __get_internet_access_ftp_port_20_parameters() -> ParameterSetType:
        """
        Creates a parameter set for the ftp port 20 and returns it
        :return: ParameterSetType
        """
        parameter_set = ParameterSetType()

        ftp_port_20 = ParameterType()
        ftp_port_20.set_name("FTP20")
        ftp_port_20.set_string_value("ftp")
        ftp_port_20.set_int_value(20)

        parameter_set.get_parameter().append(ftp_port_20)
        parameter_set.set_parameter_set_id(1)

        return parameter_set

    @staticmethod
    def __get_internet_access_ftp_port_21_parameters() -> ParameterSetType:
        """
        Creates a parameter set for the ftp port 21 and returns it
        :return: ParameterSetType
        """
        parameter_set = ParameterSetType()

        ftp_port_21 = ParameterType()
        ftp_port_21.set_name("FTP21")
        ftp_port_21.set_string_value("ftp")
        ftp_port_21.set_int_value(21)

        parameter_set.get_parameter().append(ftp_port_21)
        parameter_set.set_parameter_set_id(2)

        return parameter_set

    @staticmethod
    def __get_internet_access_http_parameters() -> ParameterSetType:
        """
        Creates a parameter set for the http parameters and returns it
        :return: ParameterSetType
        """
        parameter_set = ParameterSetType()

        http = ParameterType()
        http.set_name("HTTP port 80")
        http.set_string_value("http")
        http.set_int_value(80)

        parameter_set.get_parameter().append(http)
        parameter_set.set_parameter_set_id(3)

        return parameter_set

    @staticmethod
    def __get_internet_access_https_parameters() -> ParameterSetType:
        """
        Creates a parameter set for the https parameters and returns it
        :return: ParameterSetType
        """
        parameter_set = ParameterSetType()

        https = ParameterType()
        https.set_name("HTTP port 443")
        https.set_string_value("https")
        https.set_int_value(80)

        parameter_set.get_parameter().append(https)
        parameter_set.set_parameter_set_id(4)

        return parameter_set

    def get_response_message(self) -> BodyBaseType:
        """
        Returns the _service_detail_res
        :return _service_detail_res: BodyBaseType
        """
        return self._service_detail_res

    def __is_response_code_ok(self, service_detail_req: ServiceDetailReqType) -> bool:
        """
        Checks if all ids of all offered services are correct and if so returns True
        :param service_detail_req:
        :return:
        """
        for service in self.get_comm_session_context().get_offered_services():
            if service.get_service_id() == service_detail_req.get_service_id():
                return True

        self._service_detail_res.set_response_code(ResponseCodeType.FAILED_SERVICE_ID_INVALID)
        return False

    def process_incoming_message(self, message) -> ReactionToIncomingMessage:
        """
        Initiates check if message is valid and also checks for response code. Acts based on service id. If something's
        wrong, get_send_message is called based on the response code FAILED_SEQUENCE_ERROR
        :param message:
        :return: get_send_message (ReactionToIncomingMessage)
        """
        if self.is_incoming_message_valid(message, ServiceDetailReqType.__class__, self._service_detail_res):
            v2g_message_req = message
            service_detail_req = v2g_message_req.get_body().get_body_element().get_value()

            if self.__is_response_code_ok(service_detail_req):
                service_parameter_list = ServiceParameterListType()

                if service_detail_req.get_service_id() == 2:
                    service_parameter_list.get_parameter_set().append(self.__get_certificate_installation_parameters())
                    service_parameter_list.get_parameter_set().append(self.__get_certificate_update_parameters())

                elif service_detail_req.get_service_id() == 3:
                    service_parameter_list.get_parameter_set().append(
                        self.__get_internet_access_ftp_port_20_parameters())
                    service_parameter_list.get_parameter_set().append(
                        self.__get_internet_access_ftp_port_21_parameters())
                    service_parameter_list.get_parameter_set().append(self.__get_internet_access_http_parameters())
                    service_parameter_list.get_parameter_set().append(self.__get_internet_access_https_parameters())

                self._service_detail_res.set_service_id(service_detail_req.get_service_id())

                if len(service_parameter_list.get_parameter_set()) > 0:
                    self._service_detail_res.set_service_parameter_list(service_parameter_list)

                self.get_comm_session_context().get_states().get(V2GMessages.FORK).get_allowed_requests.append(
                    V2GMessages.SERVICE_DETAIL_REQ)
                self.get_comm_session_context().get_states().get(V2GMessages.FORK).get_allowed_requests.append(
                    V2GMessages.PAYMENT_SERVICE_SELECTION_REQ)

                return self.get_send_message(self._service_detail_res, V2GMessages.FORK)

            else:
                self.set_mandatory_fields_for_failed_res(self._service_detail_res,
                                                         self._service_detail_res.get_response_code())

        else:
            if self._service_detail_res.get_response_code() == ResponseCodeType.FAILED_SEQUENCE_ERROR:
                response_message = self.get_sequence_error_res_message(ServiceDetailResType(), message)

                return self.get_send_message(response_message, V2GMessages.NONE,
                                             self._service_detail_res.get_response_code())

            else:
                self.set_mandatory_fields_for_failed_res(self._service_detail_res,
                                                         self._service_detail_res.get_response_code())

        return self.get_send_message(self._service_detail_res, V2GMessages.NONE,
                                     self._service_detail_res.get_response_code())
