#######################################################
# 
# WaitForSessionStopReq.py
# Python implementation of the Class WaitForSessionStopReq
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 12:01:13
# Original author: Fabian.Stichtenoth
# 
#######################################################
from shared.v2gMessages.msgDef.SessionStopResType import SessionStopResType
from shared.v2gMessages.msgDef.SessionStopReqType import SessionStopReqType
from shared.v2gMessages.msgDef.BodyBaseType import BodyBaseType
from shared.v2gMessages.msgDef.ResponseCodeType import ResponseCodeType
from shared.messageHandling.ReactionToIncomingMessage import ReactionToIncomingMessage
from shared.enumerations.V2GMessages import V2GMessages
from secc.session.V2GCommunicationSessionSECC import V2GCommunicationSessionSECC
from secc.states.ServerState import ServerState


class WaitForSessionStopReq(ServerState):

    def __init__(self, comm_session_context: V2GCommunicationSessionSECC):
        super().__init__(comm_session_context)
        self._session_stop_res: SessionStopResType = SessionStopResType()

    def get_response_message(self) -> BodyBaseType:
        """
        Returns the _session_stop_res
        :return _session_stop_res: BodyBaseType
        """
        return self._session_stop_res

    def process_incoming_message(self, message) -> ReactionToIncomingMessage:
        """
        Initiates check if message is valid and if so, sets stop parameter to True. If not, calls get_send_message on
        response code FAILED_SEQUENCE_ERROR. If everything works, get_send_message is called on NONE as session is
        stopped
        :param message:
        :return: get_send_message (ReactionToIncomingMessage)
        """
        if self.is_incoming_message_valid(message, SessionStopReqType.__class__, self._session_stop_res):
            self.get_comm_session_context().set_stop_v2g_communication_session(True)

        else:
            if self._session_stop_res.get_response_code() == ResponseCodeType.FAILED_SEQUENCE_ERROR:
                response_message = self.get_sequence_error_res_message(SessionStopResType(), message)

                return self.get_send_message(response_message, V2GMessages.NONE,
                                             self._session_stop_res.get_response_code())

            else:
                self.set_mandatory_fields_for_failed_res(
                    self._session_stop_res, self._session_stop_res.get_response_code())

        return self.get_send_message(
            self._session_stop_res, V2GMessages.NONE, self._session_stop_res.get_response_code())
