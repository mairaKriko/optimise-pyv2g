#######################################################
# 
# WaitForPreChargeReq.py
# Python implementation of the Class WaitForPreChargeReq
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:59:53
# Original author: Fabian.Stichtenoth
# 
#######################################################
from shared.v2gMessages.msgDef.PreChargeResType import PreChargeResType
from shared.v2gMessages.msgDef.PreChargeReqType import PreChargeReqType
from shared.v2gMessages.msgDef.BodyBaseType import BodyBaseType
from shared.v2gMessages.msgDef.V2GMessage import V2GMessage
from shared.v2gMessages.msgDef.EVSENotificationType import EVSENotificationType
from shared.v2gMessages.msgDef.ResponseCodeType import ResponseCodeType
from shared.messageHandling.ReactionToIncomingMessage import ReactionToIncomingMessage
from shared.enumerations.V2GMessages import V2GMessages
from secc.session.V2GCommunicationSessionSECC import V2GCommunicationSessionSECC
from secc.states.ServerState import ServerState
from secc.evseController.IDCEVSEController import IDCEVSEController


class WaitForPreChargeReq(ServerState):

    def __init__(self, comm_session_context: V2GCommunicationSessionSECC):
        super().__init__(comm_session_context)
        self._pre_charge_res: PreChargeResType = PreChargeResType()

    def get_response_message(self) -> BodyBaseType:
        """
        Returns the _pre_charge_res
        :return _pre_charge_res: BodyBaseType
        """
        return self._pre_charge_res

    def process_incoming_message(self, message) -> ReactionToIncomingMessage:
        """
        Initiates check if message is valid and if sets parameters. If not, get_send_message is called on NONE. If
        everything works, get_send_message is called on FORK
        :param message:
        :return: get_send_message (ReactionToIncomingMessage)
        """
        if self.is_incoming_message_valid(message, PreChargeReqType.__class__, self._pre_charge_res):
            v2g_message_req: V2GMessage = message
            pre_charge_req: PreChargeReqType = v2g_message_req.get_body().get_body_element().get_value()

            evse_controller: IDCEVSEController = self.get_comm_session_context().get_dc_evse_controller()

            evse_controller.set_target_current(pre_charge_req.get_ev_target_current())
            evse_controller.set_target_voltage(pre_charge_req.get_ev_target_voltage())

            self._pre_charge_res.set_dc_evse_status(evse_controller.get_dc_evse_status(EVSENotificationType.NONE))
            self._pre_charge_res.set_evse_present_voltage(evse_controller.get_present_voltage())

            self.get_comm_session_context().get_states().get(V2GMessages.FORK).get_allowed_requests.append(
                V2GMessages.PRE_CHARGE_REQ)
            self.get_comm_session_context().get_states().get(V2GMessages.FORK).get_allowed_requests.append(
                V2GMessages.POWER_DELIVERY_REQ)

        else:
            if self._pre_charge_res.get_response_code() == ResponseCodeType.FAILED_SEQUENCE_ERROR:
                response_message = self.get_sequence_error_res_message(PreChargeResType(), message)

                return self.get_send_message(
                    response_message, V2GMessages.NONE, self._pre_charge_res.get_response_code())

            else:
                self.set_mandatory_fields_for_failed_res(self._pre_charge_res, self._pre_charge_res.get_response_code())

        if str(self._pre_charge_res.get_response_code()).startswith("OK"):
            v2g_mes = V2GMessages.FORK
        else:
            v2g_mes = V2GMessages.NONE

        return self.get_send_message(self._pre_charge_res, v2g_mes, self._pre_charge_res.get_response_code())
