#######################################################
# 
# ServerState.py
# Python implementation of the Class ServerState
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:56:30
# Original author: Fabian.Stichtenoth
# 
#######################################################
import abc
from abc import abstractmethod
import logging

from secc.states.WaitForMeteringReceiptReq import WaitForMeteringReceiptReq
from secc.states.WaitForPowerDeliveryReq import WaitForPowerDeliveryReq
from secc.states.WaitForServiceDiscoveryReq import WaitForServiceDiscoveryReq
from secc.evseController.IEVSEController import IEVSEController
from secc.evseController.IDCEVSEController import IDCEVSEController
from secc.session.V2GCommunicationSessionSECC import V2GCommunicationSessionSECC
from shared.v2gMessages.msgDef.BodyBaseType import BodyBaseType
from shared.messageHandling.SendMessage import SendMessage
from shared.v2gMessages.appProtocol.SupportedAppProtocolRes import SupportedAppProtocolRes
from shared.misc.State import State
from shared.misc.V2GCommunicationSession import V2GCommunicationSession
from shared.misc.TimeRestrictions import TimeRestrictions
from shared.v2gMessages.appProtocol.ResponseCodeType import ResponseCodeType as ResCodeType
from shared.v2gMessages.msgDef.ResponseCodeType import ResponseCodeType
from shared.v2gMessages.msgDef.V2GMessage import V2GMessage
from shared.v2gMessages.msgDef.SessionSetupResType import SessionSetupResType
from shared.v2gMessages.msgDef.ServiceDiscoveryResType import ServiceDiscoveryResType
from shared.v2gMessages.msgDef.ServiceDetailResType import ServiceDetailResType
from shared.v2gMessages.msgDef.PaymentServiceSelectionResType import PaymentServiceSelectionResType
from shared.v2gMessages.msgDef.PaymentDetailsResType import PaymentDetailsResType
from shared.v2gMessages.msgDef.CertificateInstallationResType import CertificateInstallationResType
from shared.v2gMessages.msgDef.CertificateUpdateResType import CertificateUpdateResType
from shared.v2gMessages.msgDef.AuthorizationResType import AuthorizationResType
from shared.v2gMessages.msgDef.ChargeParameterDiscoveryResType import ChargeParameterDiscoveryResType
from shared.v2gMessages.msgDef.CableCheckResType import CableCheckResType
from shared.v2gMessages.msgDef.PreChargeResType import PreChargeResType
from shared.v2gMessages.msgDef.PowerDeliveryResType import PowerDeliveryResType
from shared.v2gMessages.msgDef.ChargingStatusResType import ChargingStatusResType
from shared.v2gMessages.msgDef.CurrentDemandResType import CurrentDemandResType
from shared.v2gMessages.msgDef.MeteringReceiptResType import MeteringReceiptResType
from shared.v2gMessages.msgDef.WeldingDetectionResType import WeldingDetectionResType
from shared.v2gMessages.msgDef.SessionStopResType import SessionStopResType
from shared.v2gMessages.msgDef.CertificateChainType import CertificateChainType
from shared.v2gMessages.msgDef.ContractSignatureEncryptedPrivateKeyType import ContractSignatureEncryptedPrivateKeyType
from shared.v2gMessages.msgDef.DiffieHellmanPublickeyType import DiffieHellmanPublickeyType
from shared.v2gMessages.msgDef.EMAIDType import EMAIDType
from shared.v2gMessages.msgDef.EVSEProcessingType import EVSEProcessingType
from shared.v2gMessages.msgDef.EVSENotificationType import EVSENotificationType
from shared.v2gMessages.msgDef.PhysicalValueType import PhysicalValueType
from shared.v2gMessages.msgDef.UnitSymbolType import UnitSymbolType


class ServerState(State):
    __metaclass__ = abc.ABCMeta

    def get_comm_session_context(self) -> V2GCommunicationSessionSECC:
        return super().get_comm_session_context()

    @abstractmethod
    def get_response_message(self):
        """Needed for the ForkState to get the respective response message which can be
        used to instantiate a SendMessage() object in case of a sequence error
        :return: None
        """
        pass

    def get_send_message(self, message, next_expected_message, response_code=None):
        """
        Checks if response_code is of type ResponseCodeType or ResCodeType. Then prepares sending of message
        respectively. TypeError is returned if neither ResponseCodeType nor ResCodeType fit
        :param message:
        :param next_expected_message:
        :param response_code:
        :return:
        """
        if isinstance(response_code, ResponseCodeType):
            # timeout = self.get_timeout(message, next_expected_message)

            if not response_code.value().startswith("OK"):
                logging.error("Response code '" + response_code.value() + "' will be sent.")
                self.get_comm_session_context().set_stop_v2g_communication_session(True)

            return self.get_send_message(message, next_expected_message, "")

        elif isinstance(response_code, ResCodeType):
            message_name = message.__class__.__name__

            if response_code.value()[0:2].upper() is not "OK":
                logging.error("Response code '" + response_code.value() + "' will be sent.")
                self.get_comm_session_context().set_stop_v2g_communication_session(True)

            logging.debug("Preparing to send " + message_name)
            return SendMessage(message, self.get_comm_session_context().get_states().get(next_expected_message),
                               TimeRestrictions.V2G_EVCC_COMMUNICATION_SETUP_TIMEOUT)

        else:
            raise TypeError('responseCode is of wrong Type!')

    @staticmethod
    def zero():
        """
        First method of get_sequence_error_res_message-switcher
        :return response_message:
        """
        session_setup_res = SessionSetupResType()
        session_setup_res.set_response_code(ResponseCodeType.FAILED_SEQUENCE_ERROR)
        response_message = session_setup_res
        return response_message

    @staticmethod
    def one():
        """
        Second method of get_sequence_error_res_message-switcher
        :return response_message:
        """
        service_discovery_res = ServiceDiscoveryResType()
        service_discovery_res.set_response_code(ResponseCodeType.FAILED_SEQUENCE_ERROR)
        response_message = service_discovery_res
        return response_message

    @staticmethod
    def two():
        """
        Third method of get_sequence_error_res_message-switcher
        :return response_message:
        """
        service_detail_res = ServiceDetailResType()
        service_detail_res.set_response_code(ResponseCodeType.FAILED_SEQUENCE_ERROR)
        response_message = service_detail_res
        return response_message

    @staticmethod
    def three():
        """
        Fourth method of get_sequence_error_res_message-switcher
        :return response_message:
        """
        payment_service_selection_res = PaymentServiceSelectionResType()
        payment_service_selection_res.set_response_code(ResponseCodeType.FAILED_SEQUENCE_ERROR)
        response_message = payment_service_selection_res
        return response_message

    @staticmethod
    def four():
        """
        Fifth method of get_sequence_error_res_message-switcher
        :return response_message:
        """
        payment_details_res = PaymentDetailsResType()
        payment_details_res.set_response_code(ResponseCodeType.FAILED_SEQUENCE_ERROR)
        response_message = payment_details_res
        return response_message

    @staticmethod
    def five():
        """
        Sixth method of get_sequence_error_res_message-switcher
        :return response_message:
        """
        certificate_installation_res = CertificateInstallationResType()
        certificate_installation_res.set_response_code(ResponseCodeType.FAILED_SEQUENCE_ERROR)
        response_message = certificate_installation_res
        return response_message

    @staticmethod
    def six():
        """
        Seventh method of get_sequence_error_res_message-switcher
        :return response_message:
        """
        certificate_update_res = CertificateUpdateResType()
        certificate_update_res.set_response_code(ResponseCodeType.FAILED_SEQUENCE_ERROR)
        response_message = certificate_update_res
        return response_message

    @staticmethod
    def seven():
        """
        Eighth method of get_sequence_error_res_message-switcher
        :return response_message:
        """
        authorization_res = AuthorizationResType()
        authorization_res.set_response_code(ResponseCodeType.FAILED_SEQUENCE_ERROR)
        response_message = authorization_res
        return response_message

    @staticmethod
    def eight():
        """
        Ninth method of get_sequence_error_res_message-switcher
        :return response_message:
        """
        charge_parameter_discovery_res = ChargeParameterDiscoveryResType()
        charge_parameter_discovery_res.set_response_code(ResponseCodeType.FAILED_SEQUENCE_ERROR)
        response_message = charge_parameter_discovery_res
        return response_message

    @staticmethod
    def nine():
        """
        Tenth method of get_sequence_error_res_message-switcher
        :return response_message:
        """
        cable_check_res = CableCheckResType()
        cable_check_res.set_response_code(ResponseCodeType.FAILED_SEQUENCE_ERROR)
        response_message = cable_check_res
        return response_message

    @staticmethod
    def ten():
        """
        Eleventh method of get_sequence_error_res_message-switcher
        :return response_message:
        """
        pre_charge_res = PreChargeResType()
        pre_charge_res.set_response_code(ResponseCodeType.FAILED_SEQUENCE_ERROR)
        response_message = pre_charge_res
        return response_message

    @staticmethod
    def eleven():
        """
        Twelfth method of get_sequence_error_res_message-switcher
        :return response_message:
        """
        power_delivery_res_type = PowerDeliveryResType()
        power_delivery_res_type.set_response_code(ResponseCodeType.FAILED_SEQUENCE_ERROR)
        response_message = power_delivery_res_type
        return response_message

    @staticmethod
    def twelve():
        """
        Thirteenth method of get_sequence_error_res_message-switcher
        :return response_message:
        """
        charging_status_res = ChargingStatusResType()
        charging_status_res.set_response_code(ResponseCodeType.FAILED_SEQUENCE_ERROR)
        response_message = charging_status_res
        return response_message

    @staticmethod
    def thirteen():
        """
        Fourteenth method of get_sequence_error_res_message-switcher
        :return response_message:
        """
        current_demand_res = CurrentDemandResType()
        current_demand_res.set_response_code(ResponseCodeType.FAILED_SEQUENCE_ERROR)
        response_message = current_demand_res
        return response_message

    @staticmethod
    def fourteen():
        """
        Fifteenth method of get_sequence_error_res_message-switcher
        :return response_message:
        """
        metering_receipt_res = MeteringReceiptResType()
        metering_receipt_res.set_response_code(ResponseCodeType.FAILED_SEQUENCE_ERROR)
        response_message = metering_receipt_res
        return response_message

    @staticmethod
    def fifteen():
        """
        Sixteenth method of get_sequence_error_res_message-switcher
        :return response_message:
        """
        welding_detection_res = WeldingDetectionResType()
        welding_detection_res.set_response_code(ResponseCodeType.FAILED_SEQUENCE_ERROR)
        response_message = welding_detection_res
        return response_message

    @staticmethod
    def sixteen():
        """
        Seventeenth method of get_sequence_error_res_message-switcher
        :return response_message:
        """
        session_stop_res = SessionStopResType()
        session_stop_res.set_response_code(ResponseCodeType.FAILED_SEQUENCE_ERROR)
        response_message = session_stop_res
        return response_message

    def get_sequence_error_res_message(self, arg1, arg2=None):
        """
        If arg2=None, checks if arg1 is of Type V2GMessage and if so, calls switcher dependent on the type of arg1 which
        returns a response code of the respective type. If arg1 is not None, response_message is created based on arg2
        :param arg1:
        :param arg2:
        :return response_message:
        """
        if arg2 is None:
            if isinstance(arg1, V2GMessage):
                v2g_message = arg1
                class_name = v2g_message.get_body().get_body_element().get_value().__class__.__name__
                response_message = None

                switcher = {
                    "SessionSetupReqType": "zero",
                    "ServiceDiscoveryReqType": "one",
                    "ServiceDetailReqType": "two",
                    "PaymentServiceSelectionReqType": "three",
                    "PaymentDetailsReqType": "four",
                    "CertificateInstallationReqType": "five",
                    "CertificateUpdateReqType": "six",
                    "AuthorizationReqType": "seven",
                    "ChargeParameterDiscoveryReqType": "eight",
                    "CableCheckReqType": "nine",
                    "PreChargeReqType": "ten",
                    "PowerDeliveryReqType": "eleven",
                    "ChargingStatusReqType": "twelve",
                    "CurrentDemandReqType": "thirteen",
                    "MeteringReceiptReqType": "fourteen",
                    "WeldingDetectionReqType": "fifteen",
                    "SessionStopReqType": "sixteen"
                }

                func = switcher.get(class_name, lambda: logging.error("Response message could not be identified"))
                self.set_mandatory_fields_for_failed_res(response_message, ResponseCodeType.FAILED_SEQUENCE_ERROR)
                return func()

            else:
                return None

        elif arg2 is not None:
            response_message = self.get_sequence_error_res_message(arg2)

            if response_message is not None:
                return response_message
            else:
                self.set_mandatory_fields_for_failed_res(arg1, ResponseCodeType.FAILED_SEQUENCE_ERROR)
                return arg1

    @staticmethod
    def default():
        """
        Default method of is_incoming_message_valid-switcher
        :return: None
        """
        logging.error("Response message could not be identified")
        return False

    @staticmethod
    def seventeen(response_message: SessionSetupResType, response_code):
        """
        First method of is_incoming_message_valid-switcher
        :return: None
        """
        response_message.set_response_code(response_code)
        pass

    @staticmethod
    def eighteen(response_message: ServiceDiscoveryResType, response_code):
        """
        Second method of is_incoming_message_valid-switcher
        :return: None
        """
        response_message.set_response_code(response_code)
        pass

    @staticmethod
    def nineteen(response_message: ServiceDetailResType, response_code):
        """
        Third method of is_incoming_message_valid-switcher
        :return: None
        """
        response_message.set_response_code(response_code)
        pass

    @staticmethod
    def twenty(response_message: PaymentServiceSelectionResType, response_code):
        """
        Fourth method of is_incoming_message_valid-switcher
        :return: None
        """
        response_message.set_response_code(response_code)
        pass

    @staticmethod
    def twenty_one(responseMessage: PaymentDetailsResType, responseCode):
        """
        Fifth method of is_incoming_message_valid-switcher
        :return: None
        """
        responseMessage.set_response_code(responseCode)
        pass

    @staticmethod
    def twenty_two(response_message: CertificateInstallationResType, response_code):
        """
        Sixth method of is_incoming_message_valid-switcher
        :return: None
        """
        response_message.set_response_code(response_code)
        pass

    @staticmethod
    def twenty_three(response_message: CertificateUpdateResType, response_code):
        """
        Seventh method of is_incoming_message_valid-switcher
        :return: None
        """
        response_message.set_response_code(response_code)
        pass

    @staticmethod
    def twenty_four(response_message: AuthorizationResType, response_code):
        """
        Eighth method of is_incoming_message_valid-switcher
        :return: None
        """
        response_message.set_response_code(response_code)
        pass

    @staticmethod
    def twenty_five(response_message: ChargeParameterDiscoveryResType, response_code):
        """
        Ninth method of is_incoming_message_valid-switcher
        :return: None
        """
        response_message.set_response_code(response_code)
        pass

    @staticmethod
    def twenty_six(response_message: CableCheckResType, response_code):
        """
        Tenth method of is_incoming_message_valid-switcher
        :return: None
        """
        response_message.set_response_code(response_code)
        pass

    @staticmethod
    def twenty_seven(response_message: PreChargeResType, response_code):
        """
        Eleventh method of is_incoming_message_valid-switcher
        :return: None
        """
        response_message.set_response_code(response_code)
        pass

    @staticmethod
    def twenty_eight(response_message: PowerDeliveryResType, response_code):
        """
        Twelfth method of is_incoming_message_valid-switcher
        :return: None
        """
        response_message.set_response_code(response_code)
        pass

    @staticmethod
    def twenty_nine(response_message: ChargingStatusResType, response_code):
        """
        Thirteenth method of is_incoming_message_valid-switcher
        :return: None
        """
        response_message.set_response_code(response_code)
        pass

    @staticmethod
    def thirty(response_message: CurrentDemandResType, response_code):
        """
        Fourteenth method of is_incoming_message_valid-switcher
        :return: None
        """
        response_message.set_response_code(response_code)
        pass

    @staticmethod
    def thirty_one(response_message: MeteringReceiptResType, response_code):
        """
        Fifteenth method of is_incoming_message_valid-switcher
        :return: None
        """
        response_message.set_response_code(response_code)
        pass

    @staticmethod
    def thirty_two(response_message: WeldingDetectionResType, response_code):
        """
        Sixteenth method of is_incoming_message_valid-switcher
        :return: None
        """
        response_message.set_response_code(response_code)
        pass

    @staticmethod
    def thirty_three(response_message: SessionStopResType, response_code):
        """
        Seventeenth method of is_incoming_message_valid-switcher
        :return: None
        """
        response_message.set_response_code(response_code)
        pass

    def is_incoming_message_valid(self, incoming_message, expected_message, response_message: BodyBaseType):
        """
        Checks if incoming message and expected message are of correct type. Gets response code and dependent on Message
        Type enters switcher to set the respective response code. Finally checks if response code is ok
        :param incoming_message:
        :param expected_message:
        :param response_message: BodyBaseType
        :return: bool
        """

        if isinstance(incoming_message, V2GMessage):
            v2g_message = incoming_message

            if isinstance(expected_message, v2g_message.get_body().get_body_element().get_value().__class__):
                logging.debug(
                    v2g_message.get_body().get_body_element().get_value().__class__.__name__.replace(
                        "Type", "") + " received")

                response_code = self.get_comm_session_context().check_session_id(v2g_message.get_header())

            else:
                logging.fatal(
                    "Invalid message (" + v2g_message.get_body().get_body_element().get_value().__class__.__name__ +
                    ") at this state (" + self.__class__.__name__ + ")")

                response_code = ResponseCodeType.FAILED_SEQUENCE_ERROR

        else:
            logging.fatal("Incoming message is not a V2GMessage")
            response_code = ResponseCodeType.FAILED_SEQUENCE_ERROR

        switcher = {
            "SessionSetupResType": "seventeen",
            "ServiceDiscoveryResType": "eighteen",
            "ServiceDetailResType": "nineteen",
            "PaymentServiceSelectionResType": "twenty",
            "PaymentDetailsResType": "twenty_one",
            "CertificateInstallationResType": "twenty_two",
            "CertificateUpdateResType": "twenty_three",
            "AuthorizationResType": "twenty_four",
            "ChargeParameterDiscoveryResType": "twenty_five",
            "CableCheckResType": "twenty_six",
            "PreChargeResType": "twenty_seven",
            "PowerDeliveryResType": "twenty_eight",
            "ChargingStatusResType": "twenty_nine",
            "CurrentDemandResType": "thirty",
            "MeteringReceiptResType": "thirty_one",
            "WeldingDetectionResType": "thirty_two",
            "SessionStopResType": "thirty_three"
        }

        func = switcher.get(response_message.__class__.__name__, lambda: self.default())
        func(response_message, response_code)

        if str(response_code).startswith("OK"):
            return True

        else:
            return False

    def thirty_four(self, response_message: SessionSetupResType, response_code):
        """
        First method of set_mandatory_fields_for_failed_res-switcher
        :return: None
        """
        session_setup_res = response_message
        session_setup_res.set_eves_id(self.get_comm_session_context().get_evse_controller().get_evse_id())
        session_setup_res.set_response_code(response_code)
        pass

    def thirty_five(self, response_message: ServiceDiscoveryResType, response_code):
        """
        Second method of set_mandatory_fields_for_failed_res-switcher
        :return: None
        """
        service_discovery_res = response_message
        service_discovery_res.set_charge_service(
            WaitForServiceDiscoveryReq(self.get_comm_session_context()).get_charge_service())
        service_discovery_res.set_payment_option_list(self.get_comm_session_context().get_payment_option_list())
        service_discovery_res.set_response_code(response_code)
        pass

    @staticmethod
    def thirty_six(response_message: ServiceDetailResType, response_code):
        """
        Third method of set_mandatory_fields_for_failed_res-switcher
        :return: None
        """
        service_detail_res = response_message
        service_detail_res.set_service_id(1)
        service_detail_res.set_response_code(response_code)
        pass

    @staticmethod
    def thirty_seven(response_message: PaymentServiceSelectionResType, response_code):
        """
        Fourth method of set_mandatory_fields_for_failed_res-switcher
        :return: None
        """
        payment_service_selection_res = response_message
        payment_service_selection_res.set_response_code(response_code)
        pass

    @staticmethod
    def thirty_eight(response_message: PaymentDetailsResType, response_code):
        """
        Fifth method of set_mandatory_fields_for_failed_res-switcher
        :return: None
        """
        payment_details_res = response_message
        payment_details_res.set_evse_timestamp(0)
        payment_details_res.set_gen_challenge(b'1')
        payment_details_res.set_response_code(response_code)
        pass

    @staticmethod
    def thirty_nine(response_message: CertificateInstallationResType, response_code):
        """
        Sixth method of set_mandatory_fields_for_failed_res-switcher
        :return: None
        """
        certificate_installation_res = response_message
        sa_provisioning_certificate_chain = CertificateChainType()
        sa_provisioning_certificate_chain.set_certificate(b'1')
        certificate_installation_res.set_sa_provisioning_certificate_chain(sa_provisioning_certificate_chain)

        contract_signature_cert_chain = CertificateChainType()
        contract_signature_cert_chain.set_certificate(b'1')
        contract_signature_cert_chain.set_id("ID1")
        certificate_installation_res.set_contract_signature_cert_chain(contract_signature_cert_chain)

        contract_signature_encrypted_private_key = ContractSignatureEncryptedPrivateKeyType()
        contract_signature_encrypted_private_key.set_value(b'1')
        contract_signature_encrypted_private_key.set_id("ID2")
        certificate_installation_res.set_contract_signature_encrypted_private_key(
            contract_signature_encrypted_private_key)

        dh_public_key_type = DiffieHellmanPublickeyType()
        dh_public_key_type.set_value(b'1')
        dh_public_key_type.set_id("ID3")
        certificate_installation_res.set_dh_public_key(dh_public_key_type)

        emaid = EMAIDType()
        emaid.set_value("DEV2G1234512345")
        emaid.set_id("ID4")
        certificate_installation_res.set_emaid(emaid)

        certificate_installation_res.set_response_code(response_code)
        pass

    @staticmethod
    def forty(response_message: CertificateUpdateResType, response_code):
        """
        Seventh method of set_mandatory_fields_for_failed_res-switcher
        :return: None
        """
        certificate_update_res = response_message
        sa_provisioning_certificate_chain2 = CertificateChainType()
        sa_provisioning_certificate_chain2.set_certificate(b'1')
        certificate_update_res.set_sa_provisioning_certificate_chain(sa_provisioning_certificate_chain2)

        contract_signature_cert_chain2 = CertificateChainType()
        contract_signature_cert_chain2.set_certificate(b'1')
        contract_signature_cert_chain2.set_id("ID1")
        certificate_update_res.set_contract_signature_cert_chain(contract_signature_cert_chain2)

        contract_signature_encrypted_private_key2 = ContractSignatureEncryptedPrivateKeyType()
        contract_signature_encrypted_private_key2.set_value(b'1')
        contract_signature_encrypted_private_key2.set_id("ID2")
        certificate_update_res.set_contract_signature_encrypted_private_key(contract_signature_encrypted_private_key2)

        dh_public_key_type2 = DiffieHellmanPublickeyType()
        dh_public_key_type2.set_value(b'1')
        dh_public_key_type2.set_id("ID3")
        certificate_update_res.set_dh_public_key(dh_public_key_type2)

        emaid2 = EMAIDType()
        emaid2.set_value("DEV2G1234512345")
        emaid2.set_id("ID4")
        certificate_update_res.set_emaid(emaid2)

        certificate_update_res.set_retry_counter(0)
        certificate_update_res.set_response_code(response_code)
        pass

    @staticmethod
    def forty_one(response_message: AuthorizationResType, response_code):
        """
        Eighth method of set_mandatory_fields_for_failed_res-switcher
        :return: None
        """
        authorization_res = response_message
        authorization_res.set_evse_processing(EVSEProcessingType.FINISHED)
        authorization_res.set_response_code(response_code)
        pass

    def forty_two(self, response_message: ChargeParameterDiscoveryResType, response_code):
        """
        Ninth method of set_mandatory_fields_for_failed_res-switcher
        :return: None
        """
        charge_parameter_discovery_res = response_message
        charge_parameter_discovery_res.set_evse_processing(EVSEProcessingType.FINISHED)
        charge_parameter_discovery_res.set_evse_charge_parameter(
            self.get_comm_session_context().get_ac_evse_controller()).get_ac_evse_charge_parameter()
        charge_parameter_discovery_res.set_response_code(response_code)
        pass

    def forty_three(self, response_message: CableCheckResType, response_code):
        """
        Tenth method of set_mandatory_fields_for_failed_res-switcher
        :return: None
        """
        cable_check_res = response_message
        cable_check_res.set_evse_processing(EVSEProcessingType.FINISHED)
        cable_check_res.set_dc_evse_status(
            self.get_comm_session_context().get_dc_evse_controller().get_dc_evse_status(EVSENotificationType.NONE))
        cable_check_res.set_response_code(response_code)
        pass

    def forty_four(self, response_message: PreChargeResType, response_code):
        """
        Eleventh method of set_mandatory_fields_for_failed_res-switcher
        :return: None
        """
        pre_charge_res = response_message
        evse_controller = self.get_comm_session_context().get_dc_evse_controller()

        pre_charge_res.set_dc_evse_status(evse_controller.get_dc_evse_status(EVSENotificationType.NONE))

        evse_present_voltage = PhysicalValueType()
        evse_present_voltage.set_multiplier(b'0')
        evse_present_voltage.set_unit(UnitSymbolType.V)
        evse_present_voltage.set_value(0)

        pre_charge_res.set_evse_present_voltage(evse_present_voltage)
        pre_charge_res.set_response_code(response_code)
        pass

    def forty_five(self, response_message: PowerDeliveryResType, response_code):
        """
        Twelfth method of set_mandatory_fields_for_failed_res-switcher
        :return: None
        """
        power_delivery_res = response_message
        WaitForPowerDeliveryReq(self.get_comm_session_context()).set_evse_status(power_delivery_res)
        power_delivery_res.set_response_code(response_code)
        pass

    def forty_six(self, response_message: ChargingStatusResType, response_code):
        """
        Thirteenth method of set_mandatory_fields_for_failed_res-switcher
        :return: None
        """
        charging_status_res = response_message
        charging_status_res.set_evse_id(self.get_comm_session_context().get_ac_evse_controller().get_evse_id())
        charging_status_res.set_sa_schedule_tuple_id(1)
        charging_status_res.set_ac_evse_status(
            self.get_comm_session_context().get_ac_evse_controller().get_ac_evse_status(EVSENotificationType.NONE))
        charging_status_res.set_response_code(response_code)
        pass

    def forty_seven(self, response_message: CurrentDemandResType, response_code):
        """
        Fourteenth method of set_mandatory_fields_for_failed_res-switcher
        :return: None
        """
        current_demand_res = response_message
        evse_controller2 = self.get_comm_session_context().get_dc_evse_controller()

        physical_value_type = PhysicalValueType()
        physical_value_type.set_multiplier(b'0')
        physical_value_type.set_unit(UnitSymbolType.V)
        physical_value_type.set_value(1)

        current_demand_res.set_dc_evse_status(evse_controller2.get_dc_evse_status(EVSENotificationType.NONE))
        current_demand_res.set_evse_present_voltage(physical_value_type)
        current_demand_res.set_evse_present_current(physical_value_type)
        current_demand_res.set_evse_current_limit_achieved(False)
        current_demand_res.set_evse_voltage_limit_achieved(False)
        current_demand_res.set_evse_power_limit_achieved(False)
        current_demand_res.set_evse_id(evse_controller2.get_evse_id())
        current_demand_res.set_sa_schedule_tuple_id(1)

        current_demand_res.set_response_code(response_code)
        pass

    def forty_eight(self, response_message: MeteringReceiptResType, response_code):
        """
        Fifteenth method of set_mandatory_fields_for_failed_res-switcher
        :return: None
        """
        metering_receipt_res = response_message
        WaitForMeteringReceiptReq(self.get_comm_session_context()).set_evse_status(metering_receipt_res)
        metering_receipt_res.set_response_code(response_code)
        pass

    def forty_nine(self, response_message: WeldingDetectionResType, response_code):
        """
        Sixteenth method of set_mandatory_fields_for_failed_res-switcher
        :return: None
        """
        welding_detection_res = response_message
        evse_controller3 = self.get_comm_session_context().get_dc_evse_controller()

        welding_detection_res.set_dc_evse_status(evse_controller3.get_dc_evse_status(EVSENotificationType.NONE))

        evse_present_voltage2 = PhysicalValueType()
        evse_present_voltage2.set_multiplier(b'0')
        evse_present_voltage2.set_unit(UnitSymbolType.V)
        evse_present_voltage2.set_value(0)

        welding_detection_res.set_evse_present_voltage(evse_present_voltage2)
        welding_detection_res.set_response_code(response_code)
        pass

    @staticmethod
    def fifty(response_message: SessionStopResType, response_code):
        """
        Seventeenth method of set_mandatory_fields_for_failed_res-switcher
        :return: None
        """
        session_stop_res = response_message
        session_stop_res.set_response_code(response_code)
        pass

    @staticmethod
    def set_mandatory_fields_for_failed_res(response_message, response_code):
        """In case a FAILED response code is sent, the mandatory fields still need to be
        set with minimum required values, otherwise the EVCC's EXI decoder will raise
        an error.
        :param response_message: The respective response message whose mandatory fields are
        to be set
        :param response_code:
        :return: None
        """
        switcher = {
            "SessionSetupResType": "thirty_four",
            "ServiceDiscoveryResType": "thirty_five",
            "ServiceDetailResType": "thirty_six",
            "PaymentServiceSelectionResType": "thirty_seven",
            "PaymentDetailsResType": "thirty_eight",
            "CertificateInstallationResType": "thirty_nine",
            "CertificateUpdateResType": "forty",
            "AuthorizationResType": "forty_one",
            "ChargeParameterDiscoveryResType": "forty_two",
            "CableCheckResType": "forty_three",
            "PreChargeResType": "forty_four",
            "PowerDeliveryResType": "forty_five",
            "ChargingStatusResType": "forty_six",
            "CurrentDemandResType": "forty_seven",
            "MeteringReceiptResType": "forty_eight",
            "WeldingDetectionResType": "forty_nine",
            "SessionStopResType": "fifty"
        }

        func = switcher.get(response_message.__class__.__name__,
                            lambda: logging.error("Response message could not be identified"))
        func(response_message, response_code)
        pass
