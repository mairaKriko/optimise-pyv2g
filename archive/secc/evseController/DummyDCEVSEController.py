#######################################################
# 
# DummyDCEVSEController.py
# Python implementation of the Class DummyDCEVSEController
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:50:43
# Original author: Fabian.Stichtenoth
# 
#######################################################
import time
from lxml import etree

from secc.session.V2GCommunicationSessionSECC import V2GCommunicationSessionSECC
from shared.v2gMessages.msgDef.IsolationLevelType import IsolationLevelType
from shared.v2gMessages.msgDef.PhysicalValueType import PhysicalValueType
from shared.v2gMessages.msgDef.DCEVSEStatusType import DCEVSEStatusType
from shared.v2gMessages.msgDef.MeterInfoType import MeterInfoType
from shared.v2gMessages.msgDef.DCEVSEChargeParameterType import DCEVSEChargeParameterType
from shared.v2gMessages.msgDef.EVSENotificationType import EVSENotificationType
from shared.v2gMessages.msgDef.DCEVSEStatusCodeType import DCEVSEStatusCodeType
from shared.v2gMessages.msgDef.UnitSymbolType import UnitSymbolType
from secc.evseController.IDCEVSEController import IDCEVSEController


class DummyDCEVSEController(IDCEVSEController):

    def __init__(self, comm_session_context):
        super().__init__()
        self._comm_session_context = None
        self._target_current = None
        self._target_voltage = None
        self._maximum_ev_voltage_limit = None
        self._maximum_ev_current_limit = None
        self._maximum_ev_power_limit = None
        self._isolation_level = None

        self.set_comm_session_context(comm_session_context)
        self.set_isolation_level(IsolationLevelType.INVALID)

    def close_contactor(self) -> bool:
        """
        Closes the contactor if CP state C was measured (which is a prerequisite for power transfer) upon receipt of
        PowerDeliveryReq with ChargeProgress set to START. A timeout of 3s is allowed.
        :return: bool that is True, if contactor is closed, False otherwise
        """
        return True

    def get_comm_session_context(self) -> V2GCommunicationSessionSECC:
        """
        Returns a reference to the current communication session for this controller instance.
        :return _comm_session_context: V2GCommunicationSessionSECC
        """
        return self._comm_session_context

    def get_dc_evse_charge_parameter(self):
        """
        Returns the charge parameter for DC charging
        :return: The EVSE specific charge parameter for the current charging session
        """
        dc_evse_charge_parameter = DCEVSEChargeParameterType()

        dc_evse_charge_parameter.set_dc_evse_status(self.get_dc_evse_status(EVSENotificationType.NONE))
        dc_evse_charge_parameter.set_evse_maximum_current_limit(self.get_evse_maximum_current_limit())
        dc_evse_charge_parameter.set_evse_maximum_power_limit(self.get_evse_maximum_power_limit())
        dc_evse_charge_parameter.set_evse_maximum_voltage_limit(self.get_evse_maximum_voltage_limit())
        dc_evse_charge_parameter.set_evse_minimum_current_limit(self.get_evse_minimum_current_limit())
        dc_evse_charge_parameter.set_evse_minimum_voltage_limit(self.get_evse_minimum_voltage_limit())
        dc_evse_charge_parameter.set_evse_peak_current_ripple(self.get_evse_peak_current_ripple())

        # TODO: JAXBElement needs to be changed
        xml_cont: dict = vars(dc_evse_charge_parameter)

        library = etree.Element(str("urn_iso_15118_2_2013_MsgDataTypes"))

        for k, v in xml_cont.items():
            element = etree.SubElement(library, 'DC_EVSEChargeParameter')
            element.set(str(k), v)

        return library

    def get_dc_evse_status(self, notification) -> DCEVSEStatusType:
        """
        Returns the EVSE status for DC charging comprising notification, maxDelay and RCD
        :param notification:
        :return dc_evse_status: DCEVSEStatusType; The EVSE specific status
        """
        dc_evse_status = DCEVSEStatusType()
        dc_evse_status.set_notification_max_delay(0)

        if notification is not None:
            notification = notification

        else:
            notification = EVSENotificationType.NONE

        dc_evse_status.set_evse_notification(notification)
        dc_evse_status.set_evse_status_code(DCEVSEStatusCodeType.EVSE_READY)
        dc_evse_status.set_evse_isolation_status(self.get_isolation_level())

        return dc_evse_status

    @staticmethod
    def get_evse_id() -> str:
        """
        The EVSEID is formatted according to Annex H of ISO/IEC 15118 and consists of minimum 7, max 37 characters.
        :return: ID given as a string that uniquely identifies the EVSE and the power outlet the vehicle is connected to
        """
        return "DE*V2G*E12345"

    def get_evse_maximum_current_limit(self) -> PhysicalValueType:
        """
        Returns the maximum current limit of the EVSE for DC charging
        :return evse_max_current_limit: PhysicalValueType; Maximum current limit given as a PhyiscalValueType
        """
        evse_max_current_limit = PhysicalValueType()

        evse_max_current_limit.set_multiplier(0)
        evse_max_current_limit.set_unit(UnitSymbolType.A)
        evse_max_current_limit.set_value(32)

        return evse_max_current_limit

    def get_evse_maximum_power_limit(self) -> PhysicalValueType:
        """
        Returns the maximum power limit of the EVSE for DC charging
        :return evse_max_power_limit: PhysicalValueType; Maximum power limit given as a PhyiscalValueType
        """
        evse_max_power_limit = PhysicalValueType()

        evse_max_power_limit.set_multiplier(3)
        evse_max_power_limit.set_unit(UnitSymbolType.W)
        evse_max_power_limit.set_value(63)

        return evse_max_power_limit

    def get_evse_maximum_voltage_limit(self) -> PhysicalValueType:
        """
        Returns the maximum voltage limit of the EVSE for DC charging
        :return evse_max_voltage_limit: PhysicalValueType; Maximum voltage limit given as a PhyiscalValueType
        """
        evse_max_voltage_limit = PhysicalValueType()

        evse_max_voltage_limit.set_multiplier(0)
        evse_max_voltage_limit.set_unit(UnitSymbolType.V)
        evse_max_voltage_limit.set_value(400)

        return evse_max_voltage_limit

    def get_evse_minimum_current_limit(self) -> PhysicalValueType:
        """
        Returns the minimum current limit of the EVSE for DC charging
        :return evse_min_current_limit: PhysicalValueType; Minimum current limit given as a PhyiscalValueType
        """
        evse_min_current_limit = PhysicalValueType()

        evse_min_current_limit.set_multiplier(0)
        evse_min_current_limit.set_unit(UnitSymbolType.A)
        evse_min_current_limit.set_value(16)

        return evse_min_current_limit

    def get_evse_minimum_voltage_limit(self) -> PhysicalValueType:
        """
        Returns the minimum voltage limit of the EVSE for DC charging
        :return evse_min_voltage_limit: PhysicalValueType; Minimum voltage limit given as a PhyiscalValueType
        """
        evse_min_voltage_limit = PhysicalValueType()

        evse_min_voltage_limit.set_multiplier(0)
        evse_min_voltage_limit.set_unit(UnitSymbolType.V)
        evse_min_voltage_limit.set_value(230)

        return evse_min_voltage_limit

    def get_evse_peak_current_ripple(self) -> PhysicalValueType:
        """
        Returns the peak-to-peak magnitude of the current ripple of the EVSE
        :return peak_current_ripple: PhysicalValueType; Peak given as a PhyiscalValueType
        """
        peak_current_ripple = PhysicalValueType()

        peak_current_ripple.set_multiplier(0)
        peak_current_ripple.set_unit(UnitSymbolType.A)
        peak_current_ripple.set_value(0)

        return peak_current_ripple

    def get_isolation_level(self) -> IsolationLevelType:
        """
        Returns the peak-to-peak magnitude of the current ripple of the EVSE
        :return _isolation_level: IsolationLevelType; Peak given as a PhyiscalValueType
        """
        return self._isolation_level

    @staticmethod
    def get_meter_info() -> MeterInfoType:
        """
        Returns the MeterInfo record containing the latest meter reading and other meter relevant data.
        :return meter_info: MeterInfoType; Meter reading and other meter data contained in MeterInfoType
        """
        meter_info = MeterInfoType()

        meter_info.set_meter_id("1")
        meter_info.set_meter_reading(32000)
        meter_info.set_t_meter(time.time())

        return meter_info

    def get_present_current(self) -> PhysicalValueType:
        """
        Returns the present current at the EVSE
        :return _target_current: PhysicalValueType; Present current given as a PhyiscalValueType
        """
        return self._target_current

    def get_present_voltage(self) -> PhysicalValueType:
        """
        Returns the present voltage at the EVSE
        :return _target_voltage: PhysicalValueType, Present voltage given as a PhyiscalValueType
        """
        return self._target_voltage

    def is_evse_current_limit_achieved(self) -> bool:
        """
        Returns TRUE, if the EVSE has reached its current limit.
        :return: bool, that is TRUE, if the EVSE has reached its current limit, False otherwise
        """
        return False

    def is_evse_power_limit_achieved(self) -> bool:
        """
        Returns TRUE, if the EVSE has reached its power limit.
        :return: bool that is TRUE, if the EVSE has reached its power limit, False otherwise
        """
        return False

    def is_evse_voltage_limit_achieved(self) -> bool:
        """
        Returns TRUE, if the EVSE has reached its voltage limit.
        :return: bool that is TRUE, if the EVSE has reached its voltage limit, False otherwise
        """
        return False

    @staticmethod
    def open_contactor() -> bool:
        """
        Opens the contactor if CP state B was measured upon receipt of PowerDeliveryReq
        with ChargeProgress set to STOP. A timeout of 3s is allowed.
        :return: bool that is True, if contactor is opened, False otherwise
        """
        return True

    def set_comm_session_context(self, comm_session_context: V2GCommunicationSessionSECC):
        """
        Provides a reference to the current communication session for this controller
        instance.
        :param comm_session_context: V2GCommunicationSessionSECC
        :return: None
        """
        self._comm_session_context = comm_session_context

    def set_ev_maximum_current_limit(self, maximum_current: PhysicalValueType):
        """
        Sets the maximum current communicated by the EV for the DC charging process
        :param maximum_current: PhysicalValueType
        :return: None
        """
        self._maximum_ev_current_limit = maximum_current

    def set_ev_maximum_power_limit(self, maximum_power: PhysicalValueType):
        """
        Sets the maximum power communicated by the EV for the DC charging process
        :param maximum_power: PhysicalValueType
        :return: None
        """
        self._maximum_ev_power_limit = maximum_power

    def set_ev_maximum_voltage_limit(self, maximum_voltage: PhysicalValueType):
        """
        Sets the maximum voltage communicated by the EV for the DC charging process
        :param maximum_voltage: PhysicalValueType
        :return: None
        """
        self._maximum_ev_voltage_limit = maximum_voltage

    def set_isolation_level(self, isolation_level: IsolationLevelType):
        """
        Sets the IsolationLevel DC charging
        :param isolation_level: IsolationLevelType
        :return: None
        """
        self._isolation_level = isolation_level

    def set_target_current(self, target_current: PhysicalValueType):
        """
        Sets the target voltage communicated by the EV for the DC charging process
        :param target_current: PhysicalValueType; The target voltage encapsulated in a PhysicalValueType
        :return: None
        """
        self._target_current = target_current

    def set_target_voltage(self, target_voltage: PhysicalValueType):
        """
        Sets the target voltage communicated by the EV for the DC charging process
        :param target_voltage: PhysicalValueType
        :return: None
        """
        self._target_voltage = target_voltage
