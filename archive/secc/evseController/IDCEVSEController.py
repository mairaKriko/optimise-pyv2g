#######################################################
# 
# IDCEVSEController.py
# Python implementation of the Interface IDCEVSEController
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:51:12
# Original author: Fabian.Stichtenoth
# 
#######################################################
from shared.v2gMessages.msgDef.DCEVSEStatusType import DCEVSEStatusType
from shared.v2gMessages.msgDef.PhysicalValueType import PhysicalValueType
from shared.v2gMessages.msgDef.IsolationLevelType import IsolationLevelType
from shared.v2gMessages.msgDef.EVSENotificationType import EVSENotificationType
from secc.evseController.IEVSEController import IEVSEController


class IDCEVSEController(IEVSEController):
    def get_dc_evse_charge_parameter(self):
        """Returns the charge parameter for DC charging
        :return: The EVSE specific charge parameter for the current charging session
        """
        pass

    def get_dc_evse_status(self, notification: EVSENotificationType) -> DCEVSEStatusType:
        """Returns the EVSE status for DC charging comprising notification, maxDelay and RCD
        :return: DCEVSEStatusType; The EVSE specific status
        """
        pass

    def get_evse_maximum_current_limit(self) -> PhysicalValueType:
        """Returns the maximum current limit of the EVSE for DC charging
        :return: PhysicalValueType; Maximum current limit given as a PhyiscalValueType
        """
        pass

    def get_evse_maximum_power_limit(self) -> PhysicalValueType:
        """Returns the maximum power limit of the EVSE for DC charging
        :return: PhysicalValueType; Maximum power limit given as a PhyiscalValueType
        """
        pass

    def get_evse_maximum_voltage_limit(self) -> PhysicalValueType:
        """Returns the maximum voltage limit of the EVSE for DC charging
        :return: PhysicalValueType; Maximum voltage limit given as a PhyiscalValueType
        """
        pass

    def get_evse_minimum_current_limit(self) -> PhysicalValueType:
        """Returns the minimum current limit of the EVSE for DC charging
        :return: PhysicalValueType; Minimum current limit given as a PhyiscalValueType
        """
        pass

    def get_evse_minimum_voltage_limit(self) -> PhysicalValueType:
        """Returns the minimum voltage limit of the EVSE for DC charging
        :return: PhysicalValueType; Minimum voltage limit given as a PhyiscalValueType
        """
        pass

    def get_evse_peak_current_ripple(self) -> PhysicalValueType:
        """Returns the peak-to-peak magnitude of the current ripple of the EVSE
        :return: PhysicalValueType; Peak given as a PhyiscalValueType
        """
        pass

    def get_isolation_level(self):
        """Returns the peak-to-peak magnitude of the current ripple of the EVSE
        :return: Peak given as a PhyiscalValueType
        """
        pass

    def get_present_current(self) -> PhysicalValueType:
        """Returns the present current at the EVSE
        :return: PhysicalValueType; Present current given as a PhyiscalValueType
        """
        pass

    def get_present_voltage(self) -> PhysicalValueType:
        """Returns the present voltage at the EVSE
        :return: PhysicalValueType, Present voltage given as a PhyiscalValueType
        """
        pass

    def is_evse_current_limit_achieved(self) -> bool:
        """Returns TRUE, if the EVSE has reached its current limit.
        :return: bool that is TRUE, if the EVSE has reached its current limit, False otherwise
        """
        pass

    def is_evse_power_limit_achieved(self) -> bool:
        """Returns TRUE, if the EVSE has reached its power limit.
        :return: bool that is TRUE, if the EVSE has reached its power limit, False otherwise
        """
        pass

    def is_evse_voltage_limit_achieved(self) -> bool:
        """Returns TRUE, if the EVSE has reached its voltage limit.
        :return: bool that is TRUE, if the EVSE has reached its voltage limit, False otherwise
        """
        pass

    def set_ev_maximum_current_limit(self, maximum_current: PhysicalValueType):
        """Sets the maximum current communicated by the EV for the DC charging process
        :param maximum_current: PhysicalValueType
        :return: None
        """
        pass

    def set_ev_maximum_power_limit(self, maximum_power: PhysicalValueType):
        """Sets the maximum power communicated by the EV for the DC charging process
        :param maximum_power: PhysicalValueType
        :return: None
        """
        pass

    def set_ev_maximum_voltage_limit(self, maximum_voltage: PhysicalValueType):
        """Sets the maximum voltage communicated by the EV for the DC charging process
        :param maximum_voltage: PhysicalValueType
        :return: None
        """
        pass

    def set_isolation_level(self, isolation_level: IsolationLevelType):
        """Sets the IsolationLevel DC charging
        :param isolation_level: IsolationLevelType
        :return: None
        """
        pass

    def set_target_current(self, target_current: PhysicalValueType):
        """Sets the target voltage communicated by the EV for the DC charging process
        :param target_current: PhysicalValueType; The target voltage encapsulated in a PhysicalValueType
        :return: None
        """
        pass

    def set_target_voltage(self, target_voltage: PhysicalValueType):
        """Sets the target voltage communicated by the EV for the DC charging process
        :param target_voltage: PhysicalValueType
        :return: None
        """
        pass
