#######################################################
# 
# DummyACEVSEController.py
# Python implementation of the Class DummyACEVSEController
# Generated by Enterprise Architect
# Created on:      07-Jan-2021 11:50:32
# Original author: Fabian.Stichtenoth
# 
#######################################################
import time
from lxml import etree

from secc.session.V2GCommunicationSessionSECC import V2GCommunicationSessionSECC
from shared.v2gMessages.msgDef.ACEVSEStatusType import ACEVSEStatusType
from shared.v2gMessages.msgDef.MeterInfoType import MeterInfoType
from shared.v2gMessages.msgDef.ACEVSEChargeParameterType import ACEVSEChargeParameterType
from shared.v2gMessages.msgDef.PhysicalValueType import PhysicalValueType
from shared.v2gMessages.msgDef.UnitSymbolType import UnitSymbolType
from shared.v2gMessages.msgDef.EVSENotificationType import EVSENotificationType
from secc.evseController.IACEVSEController import IACEVSEController


class DummyACEVSEController(IACEVSEController):

    def __init__(self, comm_session_context):
        super().__init__()
        self._comm_session_context: V2GCommunicationSessionSECC = None
        self.set_comm_session_context(comm_session_context)

    @staticmethod
    def close_contactor() -> bool:
        """
        Closes the contactor if CP state C was measured (which is a prerequisite for
        power transfer) upon receipt of PowerDeliveryReq with ChargeProgress set to
        START. A timeout of 3s is allowed.
        :return: bool
        """
        return True

    def get_ac_evse_charge_parameter(self):
        """
        Returns the charge parameter for AC charging
        :return: The EVSE specific charge parameter for the current charging session
        """
        ac_evse_charge_parameter = ACEVSEChargeParameterType()

        evse_nominal_voltage = PhysicalValueType()
        evse_nominal_voltage.set_multiplier(0)
        evse_nominal_voltage.set_unit(UnitSymbolType.V)
        evse_nominal_voltage.set_value(230)
        ac_evse_charge_parameter.set_evse_nominal_voltage(evse_nominal_voltage)

        evse_max_current = PhysicalValueType()
        evse_max_current.set_multiplier(bytearray.fromhex("00"))
        evse_max_current.set_unit(UnitSymbolType.A)
        evse_max_current.set_value(32)
        ac_evse_charge_parameter.set_evse_max_current(evse_max_current)

        ac_evse_charge_parameter.set_ac_evse_status(self.get_ac_evse_status(EVSENotificationType.NONE))

        # TODO: JAXBElement needs to be changed
        xml_cont: dict = vars(ac_evse_charge_parameter)

        library = etree.Element(str("urn_iso_15118_2_2013_MsgDataTypes"))

        for k, v in xml_cont.items():
            element = etree.SubElement(library, 'AC_EVSEChargeParameter')
            element.set(str(k), v)

        return library

    @staticmethod
    def get_ac_evse_status(notification) -> ACEVSEStatusType:
        """
        Returns the EVSE status for AC charging comprising notification, maxDelay and RCD
        :param notification:
        :return ac_evse_status: ACEVSEStatusType; The EVSE specific status
        """
        ac_evse_status = ACEVSEStatusType()

        if notification is not None:
            notification = notification

        else:
            notification = EVSENotificationType.NONE

        ac_evse_status.set_evse_notification(notification)
        ac_evse_status.set_notification_max_delay(0)
        ac_evse_status.set_rcd(False)

        return ac_evse_status

    @staticmethod
    def get_evse_id() -> str:
        """
        The EVSEID is formatted according to Annex H of ISO/IEC 15118 and consists of minimum 7, max 37 characters.
        :return: str; ID given as a string that uniquely identifies the EVSE and the power outlet the vehicle is
        connected to
        :return:
        """
        return "DE*V2G*E12345"

    @staticmethod
    def get_meter_info() -> MeterInfoType:
        """
        Returns the MeterInfo record containing the latest meter reading and other meter relevant data.
        :return meter_info: Meter reading and other meter data contained in MeterInfoType
        """
        meter_info = MeterInfoType()
        meter_info.set_meter_id(str(1))
        meter_info.set_meter_reading(32000)
        meter_info.set_t_meter(time.time())

        return meter_info

    @staticmethod
    def open_contactor() -> bool:
        """
        Opens the contactor if CP state B was measured upon receipt of PowerDeliveryReq
        with ChargeProgress set to STOP. A timeout of 3s is allowed.
        :return: bool that is True, if contactor is opened, false otherwise
        """
        return True

    def set_comm_session_context(self, comm_session_context: V2GCommunicationSessionSECC):
        """
        Provides a reference to the current communication session for this controller instance.
        :param comm_session_context: V2GCommunicationSessionSECC
        :return _comm_session_context:
        """
        self._comm_session_context = comm_session_context
